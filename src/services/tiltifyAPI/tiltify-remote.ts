import createClient, { type Client, type Middleware } from "openapi-fetch";
import type { components, paths } from "@/types/TiltifyAPI/schema"; // generated by openapi-typescript

import { TILTIFY_API_BASE_URL } from "@/constants";

import { TiltifyCampaign } from "@/types/campaign";
import { TiltifyCampaignReward } from "@/types/campaign-reward";
import { TiltifyCause } from "@/types/cause";
import { TiltifyDonation } from "@/types/donation";
import { TiltifyPoll } from "@/types/poll";
import { TiltifyMilestone } from "@/types/milestone";

import { logger } from "@shared/firebot-modules";
import { AuthDetails } from "@crowbartools/firebot-custom-scripts-types";
import { TiltifyTarget } from "@/types/target";
import { tiltifyIntegration } from "@/services";

export class TiltifyAPIController {
    // eslint-disable-next-line no-use-before-define
    private static _instance: TiltifyAPIController;
    private client: Client<paths, `${string}/${string}`>;
    private errorManagementMiddleware: Middleware = {
        async onResponse({ response }) {
            if (response.ok) {
                return; // Skip the middleware if request was successful
            }
            const { status, statusText, url } = response;
            logger.warn(
                `Tiltify: API error ${status} when requesting "${url}": ${statusText}`
            );
        },
        async onError({ request, error }) {
            logger.warn(
                `Tiltify: API error when requesting "${request.url}": ${error}`
            );
            // Return an Error 520 for unknown error
            return new Response(null, {
                status: 520,
                statusText: `Unknown API Error: ${error}`
            });
        }
    };

    private constructor() {
        const authMiddleware: Middleware = {
            async onRequest({ request }) {
                // fetch token, if it doesnâ€™t exist
                const authRes: AuthDetails | null =
                    await tiltifyIntegration().getAuth();
                if (!authRes) {
                    throw Error(
                        "No valid Auth token available to make the request"
                    );
                }
                const accessToken = authRes.access_token;

                // add Authorization header to every request
                request.headers.set("Authorization", `Bearer ${accessToken}`);
                return request;
            }
        };

        this.client = createClient<paths>({
            baseUrl: `${TILTIFY_API_BASE_URL}`
        });
        this.client.use(this.errorManagementMiddleware);
        this.client.use(authMiddleware);
    }

    public static instance(): TiltifyAPIController {
        return (
            TiltifyAPIController._instance ||
            (TiltifyAPIController._instance = new TiltifyAPIController())
        );
    }

    async validateToken(): Promise<boolean> {
        const {
            response,
            data // only present if 2XX response
            // eslint-disable-next-line new-cap
        } = await this.client.GET("/api/public/current-user");
        if (!response.ok || !data?.data) {
            logger.warn(
                `Tiltify: Tiltify token couldn't be validated or was invalid`
            );
            return false;
        }

        const userData: components["schemas"]["User"] = data.data;
        logger.debug(
            `Tiltify: Token successfully validated for user ${userData.username}`
        );
        return true;
    }

    async getCampaign(campaignId: string): Promise<TiltifyCampaign> {
        const {
            response,
            data // only present if 2XX response
            // eslint-disable-next-line new-cap
        } = await this.client.GET("/api/public/campaigns/{campaign_id}", {
            params: { path: { campaign_id: campaignId } } // eslint-disable-line camelcase
        });
        if (!response.ok || !data?.data) {
            throw Error(`Campaign ${campaignId} data couldn't be retrieved`);
        }

        const campaignData: components["schemas"]["Campaign"] = data.data;
        return campaignData;
    }

    async getCampaignDonations(
        token: string,
        campaignId: string,
        completedAfter: string | null = null
    ): Promise<TiltifyDonation[]> {
        const {
            response,
            data // only present if 2XX response
            // eslint-disable-next-line new-cap
        } = await this.client.GET(
            "/api/public/campaigns/{campaign_id}/donations",
            {
                params: {
                    path: { campaign_id: campaignId }, // eslint-disable-line camelcase
                    query: completedAfter
                        ? { completed_after: completedAfter } // eslint-disable-line camelcase
                        : undefined
                }
            }
        );
        if (!response.ok || !data?.data) {
            throw Error(
                `Donations for campaign ${campaignId} couldn't be retrieved`
            );
        }

        const donationsData: components["schemas"]["Donation"][] = data.data;
        return donationsData;
    }

    async getCause(causeId: string): Promise<TiltifyCause> {
        const {
            response,
            data // only present if 2XX response
            // eslint-disable-next-line new-cap
        } = await this.client.GET("/api/public/causes/{cause_id}", {
            params: {
                path: { cause_id: causeId } // eslint-disable-line camelcase
            }
        });
        if (!response.ok || !data?.data) {
            throw Error(`Cause ${causeId} data couldn't be retrieved`);
        }

        const causeData: components["schemas"]["Cause"] = data.data;
        return causeData;
    }

    async getRewards(campaignId: string): Promise<TiltifyCampaignReward[]> {
        const {
            response,
            data // only present if 2XX response
            // eslint-disable-next-line new-cap
        } = await this.client.GET(
            "/api/public/campaigns/{campaign_id}/rewards",
            {
                params: {
                    path: { campaign_id: campaignId } // eslint-disable-line camelcase
                }
            }
        );
        if (!response.ok || !data?.data) {
            throw Error(
                `Rewards for campaign ${campaignId} couldn't be retrieved`
            );
        }

        const rewardsData: components["schemas"]["Reward"][] = data.data;
        return rewardsData;
    }

    async getPollOptions(campaignId: string): Promise<TiltifyPoll[]> {
        const {
            response,
            data // only present if 2XX response
            // eslint-disable-next-line new-cap
        } = await this.client.GET("/api/public/campaigns/{campaign_id}/polls", {
            params: {
                path: { campaign_id: campaignId } // eslint-disable-line camelcase
            }
        });
        if (!response.ok || !data?.data) {
            throw Error(
                `Polls for campaign ${campaignId} couldn't be retrieved`
            );
        }

        const pollsData: components["schemas"]["Poll"][] = data.data;
        return pollsData;
    }

    async getTargets(campaignId: string): Promise<TiltifyTarget[]> {
        const {
            response,
            data // only present if 2XX response
            // eslint-disable-next-line new-cap
        } = await this.client.GET(
            "/api/public/campaigns/{campaign_id}/targets",
            {
                params: {
                    path: { campaign_id: campaignId } // eslint-disable-line camelcase
                }
            }
        );
        if (!response.ok || !data?.data) {
            throw Error(
                `Targets for campaign ${campaignId} couldn't be retrieved`
            );
        }

        const targetsData: components["schemas"]["Target"][] = data.data;
        return targetsData;
    }

    async getMilestones(campaignId: string): Promise<TiltifyMilestone[]> {
        const {
            response,
            data // only present if 2XX response
            // eslint-disable-next-line new-cap
        } = await this.client.GET(
            "/api/public/campaigns/{campaign_id}/milestones",
            {
                params: {
                    path: { campaign_id: campaignId } // eslint-disable-line camelcase
                }
            }
        );
        if (!response.ok || !data?.data) {
            throw Error(
                `Milestones for campaign ${campaignId} couldn't be retrieved`
            );
        }

        const milestonesData: components["schemas"]["Milestone"][] = data.data;
        return milestonesData;
    }
}

export const tiltifyAPIController: typeof TiltifyAPIController.instance =
    TiltifyAPIController.instance.bind(TiltifyAPIController);
