import axios from "axios";
import createClient, { type Client, type Middleware } from "openapi-fetch";
import type { components, paths } from "@/types/TiltifyAPI/schema"; // generated by openapi-typescript

import { TILTIFY_API_BASE_URL, TILTIFY_API_PUBLIC_BASE_URL } from "@/constants";

import { TiltifyApiResponse } from "@/types/shared";
import { TiltifyCampaign } from "@/types/campaign";
import { TiltifyCampaignReward } from "@/types/campaign-reward";
import { TiltifyCause } from "@/types/cause";
import { TiltifyDonation } from "@/types/donation";
import { TiltifyPoll, TiltifyPollOption } from "@/types/poll";
import { TiltifyMilestone } from "@/types/milestone";

import { integrationManager, logger } from "@shared/firebot-modules";
import { TiltifyIntegration, TiltifySettings } from "@/tiltify-integration";
import { AuthDetails } from "@crowbartools/firebot-custom-scripts-types";

export class TiltifyAPIController {
    private client: Client<paths, `${string}/${string}`>;
    private integrationController: TiltifyIntegration;

    constructor() {
        const authMiddleware: Middleware = {
            async onRequest({ request }) {
                // fetch token, if it doesnâ€™t exist
                if (!this.integrationController) {
                    this.integrationController =
                        integrationManager.getIntegrationById<TiltifySettings>(
                            "tiltify"
                        ).integration as TiltifyIntegration;
                }
                const authRes: AuthDetails =
                    await this.integrationController.getAuth();
                if (!authRes) {
                    throw Error(
                        "Tiltify API: No valid Auth token available to make the request"
                    );
                }
                const accessToken = authRes.access_token;

                // add Authorization header to every request
                request.headers.set("Authorization", `Bearer ${accessToken}`);
                return request;
            }
        };

        this.client = createClient<paths>({
            baseUrl: `${TILTIFY_API_BASE_URL}`
        });
        this.client.use(authMiddleware);
    }

    async validateToken(): Promise<boolean> {
        try {
            const {
                data, // only present if 2XX response
                error // only present if 4XX or 5XX response
                // eslint-disable-next-line new-cap
            } = await this.client.GET("/api/public/current-user");
            if (error) {
                logger.warn(
                    `Tiltify: API error ${error.error.status} validating Tiltify token : ${error.error.message}`
                );
                return false;
            }

            const userData: components["schemas"]["User"] = data.data;
            logger.debug(
                `Tiltify: Token successfully validated for user ${userData.username}`
            );
            return true;
        } catch (e) {
            logger.warn(
                `Tiltify: Error validating Tiltify token : ${e.message}`
            );
            return false;
        }
    }

    async getCampaign(campaignId: string): Promise<TiltifyCampaign> {
        try {
            const {
                data, // only present if 2XX response
                error // only present if 4XX or 5XX response
                // eslint-disable-next-line new-cap
            } = await this.client.GET("/api/public/campaigns/{campaign_id}", {
                // eslint-disable-next-line camelcase
                params: { path: { campaign_id: campaignId } }
            });
            if (error) {
                logger.warn(
                    `Tiltify: API error ${error.error.status} getting campaign data : ${error.error.message}`
                );
                return;
            }

            interface ParsedQs {
                [key: string]:
                | undefined
                | string
                | string[]
                | ParsedQs
                | ParsedQs[];
            }
            let var1: ParsedQs = { body: "test" };
            var1 = { body: { bar: { baz: "foobarbaz" } } };
            const var2 = var1.body as string;
            const campaignData: components["schemas"]["Campaign"] = data.data;
            return campaignData;
        } catch (e) {
            logger.warn(`Tiltify: Error getting campaign data : ${e.message}`);
            return;
        }
    }

    async getCampaignDonations(
        token: string,
        campaignId: string,
        completedAfter: string = null
    ): Promise<TiltifyDonation[]> {
        try {
            const url =
                completedAfter != null
                    ? `${TILTIFY_API_PUBLIC_BASE_URL}/campaigns/${campaignId}/donations?completed_after=${completedAfter}`
                    : `${TILTIFY_API_PUBLIC_BASE_URL}/campaigns/${campaignId}/donations`;

            const response = await axios.get<
            TiltifyApiResponse<TiltifyDonation[]>
            >(url, {
                headers: {
                    Authorization: `Bearer ${token}`
                }
            });

            if (response.status !== 200) {
                logger.warn(`Error fetching donations: ${response.status}`);
                return [];
            }

            return response.data.data;
        } catch (e) {
            if (e.response) {
                logger.warn(`Tiltify Error : ${e.response?.data}`);
            } else {
                logger.warn("Tiltify Error : Unknown error");
            }

            return [];
        }
    }

    async getCause(token: string, causeId: string): Promise<TiltifyCause> {
        try {
            const response = await axios.get<TiltifyApiResponse<TiltifyCause>>(
                `${TILTIFY_API_PUBLIC_BASE_URL}/causes/${causeId}`,
                {
                    headers: {
                        Authorization: `Bearer ${token}`
                    }
                }
            );
            return response.data.data;
        } catch (e) {
            if (e.response) {
                logger.warn(`Tiltify Error : ${e.response?.data}`);
            } else {
                logger.warn("Tiltify Error : Unknown error");
            }

            return;
        }
    }

    async getRewards(
        token: string,
        campaignId: string
    ): Promise<TiltifyCampaignReward[]> {
        try {
            const response = await axios.get<
            TiltifyApiResponse<TiltifyCampaignReward[]>
            >(
                `${TILTIFY_API_PUBLIC_BASE_URL}/campaigns/${campaignId}/rewards`,
                {
                    headers: {
                        Authorization: `Bearer ${token}`
                    }
                }
            );
            return response.data.data;
        } catch (e) {
            if (e.response) {
                logger.warn(`Tiltify Error : ${e.response?.data}`);
            } else {
                logger.warn("Tiltify Error : Unknown error");
            }

            return [];
        }
    }

    async getPollOptions(
        token: string,
        campaignId: string
    ): Promise<TiltifyPollOption[]> {
        try {
            const response = await axios.get<TiltifyApiResponse<TiltifyPoll[]>>(
                `${TILTIFY_API_PUBLIC_BASE_URL}/campaigns/${campaignId}/polls`,
                {
                    headers: {
                        Authorization: `Bearer ${token}`
                    }
                }
            );
            return response.data.data.reduce<TiltifyPollOption[]>(
                (acc, poll) => acc.concat(...poll.options),
                []
            );
        } catch (e) {
            if (e.response) {
                logger.warn(`Tiltify Error : ${e.response?.data}`);
            } else {
                logger.warn("Tiltify Error : Unknown error");
            }

            return [];
        }
    }

    async getTargets(token: string, campaignId: string) {
        try {
            const response = await axios.get(
                `${TILTIFY_API_PUBLIC_BASE_URL}/campaigns/${campaignId}/targets`,
                {
                    headers: {
                        Authorization: `Bearer ${token}`
                    }
                }
            );
            return response.data.data;
        } catch (e) {
            if (e.response) {
                logger.warn(`Tiltify Error : ${e.response?.data}`);
            } else {
                logger.warn("Tiltify Error : Unknown error");
            }

            return [];
        }
    }

    async getMilestones(
        token: string,
        campaignId: string
    ): Promise<TiltifyMilestone[]> {
        try {
            const response = await axios.get<
            TiltifyApiResponse<TiltifyMilestone[]>
            >(
                `${TILTIFY_API_PUBLIC_BASE_URL}/campaigns/${campaignId}/milestones`,
                {
                    headers: {
                        Authorization: `Bearer ${token}`
                    }
                }
            );
            return response.data.data;
        } catch (e) {
            if (e.response) {
                logger.warn(`Tiltify Error : ${e.response?.data}`);
            } else {
                logger.warn("Tiltify Error : Unknown error");
            }

            return [];
        }
    }

    async APIrequest<APIDataType>(
        token: string,
        endpoint: string
    ): Promise<APIDataType | null> {
        try {
            const response = await axios.get<TiltifyApiResponse<APIDataType>>(
                `${TILTIFY_API_PUBLIC_BASE_URL}/${endpoint}`,
                {
                    headers: {
                        Authorization: `Bearer ${token}`
                    }
                }
            );
            return response.data.data;
        } catch (e) {
            if (e.response) {
                logger.warn(`Tiltify Error : ${e.response?.data}`);
            } else {
                logger.warn("Tiltify Error : Unknown error");
            }

            return null;
        }
    }
}

export const tiltifyAPIService = new TiltifyAPIController();
