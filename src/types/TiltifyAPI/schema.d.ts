/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/public/personal-campaigns/{personal_campaign_id}/milestones": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List milestones */
        get: operations["getPersonalCampaignMilestones"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/fundraising_events/{fundraising_event_id}/configured_leaderboard": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List configured leaderboards
         * @deprecated
         */
        get: operations["getFundraisingEventConfiguredLeaderboards"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/campaigns/{campaign_id}/schedules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List schedules */
        get: operations["getCampaignSchedules"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/fundraising_events/{fundraising_event_id}/team_leaderboard": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List top teams */
        get: operations["V5ApiWeb.Public.FundraisingEventLeaderboardController.team"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/campaigns/{campaign_id}/fitness_goals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List fitness goals */
        get: operations["getCampaignFitnessGoals"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/fundraising_events/{fundraising_event_id}/user_leaderboard": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List top fundraisers */
        get: operations["V5ApiWeb.Public.FundraisingEventLeaderboardController.user"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/causes/{cause_id}/team_leaderboard": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List top teams */
        get: operations["V5ApiWeb.Public.CauseLeaderboardController.team"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/users/{user_id}/integration_events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all Campaigns and Team Campaigns by User ID */
        get: operations["getUserCampaignsAndTeamCampaigns"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/team_campaigns/{team_campaign_id}/targets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List targets */
        get: operations["getTeamCampaignTargets"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/team_campaigns/{team_campaign_id}/polls": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List polls */
        get: operations["getTeamCampaignPolls"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/fundraising_events/{fundraising_event_id}/team_fitness_time_leaderboard": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List top teams fitness times */
        get: operations["V5ApiWeb.Public.FundraisingEventLeaderboardController.team_fitness_time"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/team_campaigns/{team_campaign_id}/donations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List donations */
        get: operations["getTeamCampaignDonations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/personal-campaigns/{personal_campaign_id}/rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List rewards */
        get: operations["getPersonalCampaignRewards"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Token
         * @description Returns an access and refresh token with a provided client id, secret, and grant type. Tokens expire in `7200` seconds.
         */
        post: operations["V5ApiWeb.Oauth.Token"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/current-user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets the current user for an access token
         * @description Returns a user for a given oauth access token
         */
        get: operations["V5ApiWeb.Public.UserController.current_user"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/users/{user_id}/teams": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List teams */
        get: operations["getUserTeams"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/fundraising_events/{fundraising_event_id}/user_fitness_distance_leaderboard": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List top users fitness distances */
        get: operations["V5ApiWeb.Public.FundraisingEventLeaderboardController.user_fitness_distance"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/fundraising_events/{fundraising_event_id}/user_fitness_time_leaderboard": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List top users fitness times */
        get: operations["V5ApiWeb.Public.FundraisingEventLeaderboardController.user_fitness_time"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/fundraising_events/{fundraising_event_id}/donor_leaderboard": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List top donors */
        get: operations["V5ApiWeb.Public.FundraisingEventLeaderboardController.donor"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/campaigns/by/slugs/{user_slug}/{campaign_slug}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get campaign by user slug and campaign slug
         * @description Returns a Campaign by its user slug and campaign slug
         */
        get: operations["V5ApiWeb.Public.CampaignController.show_slug"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/auction_houses/by/user/slugs/{user_slug}/{auction_house_slug}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get auction house by user slug and auction house slug
         * @description Returns an auction house by its user slug and auction house slug
         */
        get: operations["V5ApiWeb.Public.AuctionHouseController.show_user_slug"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/team_campaigns/{team_campaign_id}/schedules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List schedules */
        get: operations["getTeamCampaignSchedules"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/fundraising_events/{fundraising_event_id}/supporting_events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List campaigns
         * @description Returns supporting campaigns by Fundraising Event ID
         */
        get: operations["getFundraisingEventSupportingEvents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/personal-campaigns/{personal_campaign_id}/polls/{poll_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get campaign poll by ID
         * @description Returns a poll by its ID
         */
        get: operations["getPersonalCampaignPollbyId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/campaigns/{campaign_id}/polls": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List polls */
        get: operations["getCampaignPolls"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/teams/{team_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get by ID
         * @description Returns a team by its ID
         */
        get: operations["getTeam"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/team_campaigns/{team_campaign_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get by ID
         * @description Returns a Team Campaign by its ID
         */
        get: operations["getTeamCampaign"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/campaigns/{campaign_id}/targets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List targets */
        get: operations["getCampaignTargets"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/causes/{cause_id}/fundraising_events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List fundraising events */
        get: operations["getCauseFundraisingEvents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/causes/{cause_id}/donor_leaderboard": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List top donors */
        get: operations["V5ApiWeb.Public.CauseLeaderboardController.donor"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/team_campaigns/{team_campaign_id}/milestones": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List milestones */
        get: operations["getTeamCampaignMilestones"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/campaigns/{campaign_id}/polls/{poll_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get campaign poll by ID
         * @description Returns a poll by its ID
         */
        get: operations["getCampaignPollbyId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/personal-campaigns/{personal_campaign_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get by ID
         * @description Returns a personal campaign by its ID
         */
        get: operations["getPersonalCampaign"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/users/by/slug/{slug}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get by slug
         * @description Returns a user by its slug
         */
        get: operations["V5ApiWeb.Public.UserController.show_slug"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/fundraising_events/{fundraising_event_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get by ID
         * @description Returns a fundraising event by its ID
         */
        get: operations["getFundraisingEvent"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/teams/{team_id}/members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List team members */
        get: operations["getTeamMembers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/users/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get by ID
         * @description Returns a user by its ID
         */
        get: operations["getUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/teams/{team_id}/team_campaigns": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Team Campaigns */
        get: operations["getTeamCampaigns"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/team_campaigns/{team_campaign_id}/user_leaderboards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List top fundraisers */
        get: operations["V5ApiWeb.Public.TeamCampaignLeaderboardController.user"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/campaigns/{campaign_id}/donations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List donations */
        get: operations["getCampaignDonations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/team_campaigns/{team_campaign_id}/fitness_goals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List fitness goals */
        get: operations["getTeamCampaignFitnessGoals"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/teams/by/slug/{slug}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get by slug
         * @description Returns a team by its slug
         */
        get: operations["getTeamBySlug"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/auction_houses/{auction_house_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get by ID
         * @description Returns a auction house by its ID
         */
        get: operations["getAuctionHouse"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/personal-campaigns/{personal_campaign_id}/supporting_campaigns": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List supporting campaigns */
        get: operations["getPersonalCampaignSupportingCampaigns"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth/authorize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Authorize
         * @description Returns a `code` through the applications `redirect_uri` to be used with the `/token` with the `authorization_code` grant.
         */
        get: operations["V5ApiWeb.Oauth.Authorize"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/fundraising_events/{fundraising_event_id}/team_fitness_distance_leaderboard": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List top teams fitness distances */
        get: operations["V5ApiWeb.Public.FundraisingEventLeaderboardController.team_fitness_distance"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/campaigns/{campaign_id}/donation_matches": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List donation matches */
        get: operations["getCampaignDonationMatches"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/team_campaigns/{team_campaign_id}/polls/{poll_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get team campaign poll by ID
         * @description Returns a poll by its ID
         */
        get: operations["getTeamCampaignPollbyId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/campaigns/{campaign_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get by ID
         * @description Returns a campaign by its ID
         */
        get: operations["getCampaign"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/campaigns/{campaign_id}/rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List rewards */
        get: operations["getCampaignRewards"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/fundraising_events/{fundraising_event_id}/fitness_goals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List fitness goals */
        get: operations["getFundraisingEventFitnessGoals"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/auction_houses/{auction_house_id}/auction_items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List auction items */
        get: operations["getAuctionHouseAuctionItems"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/personal-campaigns/{personal_campaign_id}/contributions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List gifts */
        get: operations["getPersonalCampaignGifts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/auction_houses/{auction_house_id}/auction_items/{auction_item_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get auction house auction item by ID
         * @description Returns a auction item by its ID
         */
        get: operations["getAuctionHouseAuctionItemById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/campaigns/{campaign_id}/milestones": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List milestones */
        get: operations["getCampaignMilestones"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/fundraising_events/{fundraising_event_id}/donations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List donations
         * @deprecated
         * @description  This endpoint will list donations for a given Fundraising Event. Contact
         *      support for access to this endpoint.
         *
         */
        get: operations["getFundraisingEventDonations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/legacy-relays/{provider}/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Queries a donation relay
         * @deprecated
         */
        get: operations["getLegacyRelay"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/team_campaigns/{team_campaign_id}/rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List rewards */
        get: operations["getTeamCampaignRewards"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/causes/{cause_id}/configured_leaderboard": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List configured leaderboards
         * @deprecated
         */
        get: operations["getCauseConfiguredLeaderboards"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/users/{user_id}/campaigns": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List campaigns */
        get: operations["getUserCampaigns"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/personal-campaigns/{personal_campaign_id}/schedules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List schedules */
        get: operations["getPersonalCampaignSchedules"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/causes/{cause_id}/user_leaderboard": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List top fundraisers */
        get: operations["V5ApiWeb.Public.CauseLeaderboardController.user"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/auction_houses/{auction_house_id}/auction_items/{auction_item_id}/auction_bids": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List auction bids for an auction item */
        get: operations["getAuctionHouseAuctionItemAuctionBids"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/team_campaigns/{team_campaign_id}/donor_leaderboards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List top donors */
        get: operations["getTeamCampaignTopDonors"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/team_campaigns/{team_campaign_id}/supporting_campaigns": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List supporting campaigns */
        get: operations["getTeamCampaignSupportingCampaigns"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/personal-campaigns/{personal_campaign_id}/polls": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List polls */
        get: operations["getPersonalCampaignPolls"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/campaigns/{campaign_id}/donor_leaderboard": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List top donors */
        get: operations["getCampaignTopDonors"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/team_campaigns/by/slugs/{team_slug}/{team_campaign_slug}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get team campaign by team slug and campaign slug
         * @description Returns a Team Campaign by its team slug and campaign slug
         */
        get: operations["V5ApiWeb.Public.TeamCampaignController.show_slug"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/causes/{cause_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get by ID
         * @description Returns a cause by its ID
         */
        get: operations["getCause"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/personal-campaigns/{personal_campaign_id}/targets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List targets */
        get: operations["getPersonalCampaignTargets"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/auction_houses/by/cause/slugs/{cause_slug}/{auction_house_slug}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get auction house by cause slug and auction house slug
         * @description Returns an auction house by its cause slug and auction house slug
         */
        get: operations["V5ApiWeb.Public.AuctionHouseController.show_cause_slug"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * TeamResponse
         * @example {
         *       "data": {
         *         "avatar": {
         *           "alt": "Short image description used as alternative text.",
         *           "height": 200,
         *           "src": "https://tiltify.com/images/example.jpg",
         *           "width": 200
         *         },
         *         "description": "Awesome group of friends fundraising for charity together.",
         *         "id": "1384e7cb-929c-4416-b897-8240be75c640",
         *         "legacy_id": 384857859,
         *         "name": "Awesome Team",
         *         "slug": "awesome-team",
         *         "social": {
         *           "discord": "https://discord.gg/tiltify",
         *           "facebook": "tiltify",
         *           "instagram": "tiltify",
         *           "snapchat": "tiltify",
         *           "tiktok": "tilitfy",
         *           "twitch": "tilitfy",
         *           "twitter": "tiltify",
         *           "website": "https://tiltify.com",
         *           "youtube": "UCWcPgWbuWuJX5rHWm6Kb4Vw"
         *         },
         *         "total_amount_raised": {
         *           "currency": "USD",
         *           "value": "182.32"
         *         },
         *         "url": "https://tiltify.com/+awesome-team"
         *       }
         *     }
         */
        TeamResponse: {
            data?: components["schemas"]["Team"];
        };
        /**
         * User
         * @example {
         *       "avatar": {
         *         "alt": "Short image description used as alternative text.",
         *         "height": 200,
         *         "src": "https://tiltify.com/images/example.jpg",
         *         "width": 200
         *       },
         *       "description": "Professional twitch streamer who likes charity!",
         *       "id": "198ec291-7fc3-41a4-b408-18b1f936e4a8",
         *       "legacy_id": 121506308,
         *       "slug": "username",
         *       "social": {
         *         "discord": "https://discord.gg/tiltify",
         *         "facebook": "tiltify",
         *         "instagram": "tiltify",
         *         "snapchat": "tiltify",
         *         "tiktok": "tilitfy",
         *         "twitch": "tilitfy",
         *         "twitter": "tiltify",
         *         "website": "https://tiltify.com",
         *         "youtube": "UCWcPgWbuWuJX5rHWm6Kb4Vw"
         *       },
         *       "total_amount_raised": {
         *         "currency": "USD",
         *         "value": "182.32"
         *       },
         *       "url": "https://tiltify.com/@username",
         *       "username": "UserName"
         *     }
         */
        User: {
            avatar: components["schemas"]["Image"];
            /** @description The description section on a user's profile. */
            description: string | null;
            id: components["schemas"]["PublicId"];
            legacy_id: components["schemas"]["LegacyId"];
            slug: components["schemas"]["Slug"];
            social: components["schemas"]["Social"];
            /** @description The total amount raised by this user represented in USD. */
            total_amount_raised: components["schemas"]["Money"];
            /** @description This is the full url for the user profile. */
            url: components["schemas"]["Url"];
            /** @description The user's username */
            username: string;
        };
        /**
         * Reward
         * @example {
         *       "active": true,
         *       "amount": {
         *         "currency": "USD",
         *         "value": "182.32"
         *       },
         *       "description": "The streamer will pick a song and sing it poorly",
         *       "ends_at": "2024-12-04T18:44:58.098081Z",
         *       "fair_market_value": {
         *         "currency": "USD",
         *         "value": "182.32"
         *       },
         *       "highlighted": true,
         *       "id": "1e410b0f-c307-4e26-9439-5656f7090809",
         *       "image": {
         *         "alt": "Short image description used as alternative text.",
         *         "height": 200,
         *         "src": "https://tiltify.com/images/example.jpg",
         *         "width": 200
         *       },
         *       "inserted_at": "2024-12-04T18:44:58.098121Z",
         *       "legacy_id": 25729568,
         *       "name": "Sing a Song Poorly",
         *       "quantity": 1000,
         *       "quantity_remaining": 23,
         *       "starts_at": "2024-12-04T18:44:58.098135Z",
         *       "updated_at": "2024-12-04T18:44:58.098143Z"
         *     }
         */
        Reward: {
            /** @description Whether or not the reward is active */
            active: boolean;
            /** @description Amount needed to claim this reward */
            amount: components["schemas"]["Money"];
            /** @description Short description of the reward */
            description: string | null;
            /**
             * Format: date-time
             * @description Moment when the reward ends
             */
            ends_at: string | null;
            /** @description The fair market value of this reward */
            fair_market_value: components["schemas"]["Money"] | null;
            /** @description If the reward is highlighted ro not */
            highlighted: boolean;
            /** @description Unique Identifier for the reward. */
            id: components["schemas"]["PublicId"];
            image: components["schemas"]["Image"] | null;
            /**
             * Format: date-time
             * @description Moment when the reward was created
             */
            inserted_at: string;
            legacy_id: components["schemas"]["LegacyId"];
            /** @description Reward name */
            name: string;
            /** @description total amount of this reward if it has a limited quantity */
            quantity: number | null;
            /** @description remaining amount of this reward if it has a limited quantity */
            quantity_remaining: number | null;
            /**
             * Format: date-time
             * @description Moment when the reward starts
             */
            starts_at: string | null;
            /**
             * Format: date-time
             * @description Moment when the milestone was last updated
             */
            updated_at: string;
        };
        /**
         * AuctionHouse
         * @example {
         *       "amount_raised": {
         *         "currency": "USD",
         *         "value": "182.32"
         *       },
         *       "avatar": {
         *         "alt": "Short image description used as alternative text.",
         *         "height": 200,
         *         "src": "https://tiltify.com/images/example.jpg",
         *         "width": 200
         *       },
         *       "banner": {
         *         "alt": "Short image description used as alternative text.",
         *         "height": 200,
         *         "src": "https://tiltify.com/images/example.jpg",
         *         "width": 200
         *       },
         *       "campaign_id": "0723c5cb-751f-4953-bfdc-a1bb1b005570",
         *       "cause_id": "01dd91b5-a44a-421a-a872-5f6ae3599b36",
         *       "description": "My Awesome weekend auction house.",
         *       "fundraising_event_id": "a61352ab-9a74-4411-9796-426cb801c315",
         *       "id": "5a012dd6-3bbe-4c6d-a5b7-563c412f7239",
         *       "inserted_at": "2024-12-04T18:44:57.416770Z",
         *       "name": "My Awesome Auction House",
         *       "pledged_amount_raised": {
         *         "currency": "USD",
         *         "value": "182.32"
         *       },
         *       "pledged_total_amount_raised": {
         *         "currency": "USD",
         *         "value": "182.32"
         *       },
         *       "published_at": "2024-12-04T18:44:57.416786Z",
         *       "retired_at": "2024-12-04T18:44:57.416790Z",
         *       "slug": "my-awesome-auction-house",
         *       "status": "published",
         *       "team_event_id": "3057027b-620a-476a-818e-1536938c5308",
         *       "total_amount_raised": {
         *         "currency": "USD",
         *         "value": "182.32"
         *       },
         *       "updated_at": "2024-12-04T18:44:57.416797Z",
         *       "url": "https://tiltify.com/@username/auctions/my-awesome-auction-house",
         *       "user_id": "35cd3a39-d145-4dfa-9519-5a1ad3277020"
         *     }
         */
        AuctionHouse: {
            /** @description The amount raised directly by this auction house */
            amount_raised: components["schemas"]["Money"];
            avatar: components["schemas"]["Image"];
            banner: components["schemas"]["Image"];
            /** @description The ID for the campaign that this auction house is supporting. */
            campaign_id: components["schemas"]["PublicId"] | null;
            /** @description The ID for the cause that this auction house is supporting. */
            cause_id: components["schemas"]["PublicId"];
            /** @description A short description about this auction house */
            description: string;
            /** @description The ID for the fundraising event that this auction house is supporting. */
            fundraising_event_id: components["schemas"]["PublicId"] | null;
            id: components["schemas"]["PublicId"];
            /**
             * Format: date-time
             * @description When the auction house was created
             */
            inserted_at: string;
            /** @description The name of this auction house */
            name: string;
            /** @description The amount of money that is pending from completed auction items */
            pledged_amount_raised: components["schemas"]["Money"];
            /** @description The amount of money that is pending from completed auction items */
            pledged_total_amount_raised: components["schemas"]["Money"];
            /**
             * Format: date-time
             * @description When the auction house was last published
             */
            published_at: string;
            /**
             * Format: date-time
             * @description When the auction house was retired
             */
            retired_at: string | null;
            slug: components["schemas"]["Slug"];
            /**
             * @description The status of this auction house
             * @enum {string}
             */
            status: "unpublished" | "published" | "retired";
            /** @description The ID for the team event that this auction house is supporting. */
            team_event_id: components["schemas"]["PublicId"] | null;
            /** @description The amount raised by this auction house */
            total_amount_raised: components["schemas"]["Money"];
            /**
             * Format: date-time
             * @description When the auction house details were last updated
             */
            updated_at: string;
            /** @description This is the full url for the auction house. */
            url: components["schemas"]["Url"];
            /** @description The ID for a User that owns this auction house. */
            user_id: components["schemas"]["PublicId"] | null;
        };
        /**
         * FundraisingEventResponse
         * @example {
         *       "data": {
         *         "avatar": {
         *           "alt": "Short image description used as alternative text.",
         *           "height": 200,
         *           "src": "https://tiltify.com/images/example.jpg",
         *           "width": 200
         *         },
         *         "can_publish_supporting_at": "2024-12-04T18:44:57.244988Z",
         *         "cause_id": "133a5886-9bdd-48d3-b89c-93a6ab01ecaa",
         *         "currency_code": "USD",
         *         "description": "Let's get **spooooky**!",
         *         "donate_url": "https://donate.tiltify.com/cause-slug/spooktober-2022",
         *         "end_supporting_at": "2024-12-04T18:44:57.244984Z",
         *         "ends_at": "2024-12-04",
         *         "goal": {
         *           "currency": "USD",
         *           "value": "182.32"
         *         },
         *         "id": "89ca8f41-edc2-4eda-aeaf-31a70e22119a",
         *         "inserted_at": "2024-12-04T18:44:57.244937Z",
         *         "legacy_id": 738070683,
         *         "name": "Spooktober 2022",
         *         "published_at": "2024-12-04T18:44:57.244965Z",
         *         "retired_at": null,
         *         "slug": "spooktober-2022",
         *         "start_supporting_at": "2024-12-04T18:44:57.244980Z",
         *         "starts_at": "2024-12-04",
         *         "status": "published",
         *         "total_amount_raised": {
         *           "currency": "USD",
         *           "value": "182.32"
         *         },
         *         "updated_at": "2024-12-04T18:44:57.244995Z",
         *         "url": "https://tiltify.com/cause-slug/spooktober-2022"
         *       }
         *     }
         */
        FundraisingEventResponse: {
            data?: components["schemas"]["FundraisingEvent"];
        };
        /**
         * CurrencyCode
         * @description ISO 4217 alphabetic currency code
         * @example USD
         */
        CurrencyCode: string;
        /**
         * Social
         * @description An object with various social usernames and links
         * @example {
         *       "discord": "https://discord.gg/tiltify",
         *       "facebook": "tiltify",
         *       "instagram": "tiltify",
         *       "snapchat": "tiltify",
         *       "tiktok": "tilitfy",
         *       "twitch": "tilitfy",
         *       "twitter": "tiltify",
         *       "website": "https://tiltify.com",
         *       "youtube": "UCWcPgWbuWuJX5rHWm6Kb4Vw"
         *     }
         */
        Social: {
            /** @description Discord invite url */
            discord: string | null;
            /** @description Facebook Page username */
            facebook: string | null;
            /** @description Instagram username */
            instagram: string | null;
            /** @description Snapchat username */
            snapchat: string | null;
            /** @description TikTok username */
            tiktok: string | null;
            /** @description Twitch username */
            twitch: string | null;
            /** @description Twitter username */
            twitter: string | null;
            /** @description Custom website url */
            website: string | null;
            /** @description Youtube channel ID */
            youtube: string | null;
        } | null;
        /**
         * Target
         * @example {
         *       "active": true,
         *       "amount": {
         *         "currency": "USD",
         *         "value": "182.32"
         *       },
         *       "amount_raised": {
         *         "currency": "USD",
         *         "value": "182.32"
         *       },
         *       "ends_at": "2024-12-04T18:44:58.188260Z",
         *       "id": "4c433a54-eea8-4640-9fa7-9e5725264d84",
         *       "inserted_at": "2024-12-04T18:44:58.188296Z",
         *       "legacy_id": 247235058,
         *       "name": "Learn a TikTok dance live!",
         *       "updated_at": "2024-12-04T18:44:58.188313Z"
         *     }
         */
        Target: {
            /** @description Whether or not the target is active */
            active: boolean;
            /** @description Amount to hit this target */
            amount: components["schemas"]["Money"];
            /** @description Amount Raised by this target */
            amount_raised: components["schemas"]["Money"];
            /**
             * Format: date-time
             * @description Moment when the target ends
             */
            ends_at: string;
            /** @description Unique Identifier for the target. */
            id: components["schemas"]["PublicId"];
            /**
             * Format: date-time
             * @description Moment when the target was created
             */
            inserted_at: string;
            legacy_id: components["schemas"]["LegacyId"];
            /** @description target name */
            name: string;
            /**
             * Format: date-time
             * @description Moment when the target was last updated
             */
            updated_at: string;
        };
        /**
         * DonationPaginatedResponse
         * @example {
         *       "data": [
         *         {
         *           "amount": {
         *             "currency": "USD",
         *             "value": "182.32"
         *           },
         *           "campaign_id": "45e72d40-4d56-4c8a-8fee-a57b709cf5ff",
         *           "cause_id": "f9368db2-bbc1-4f7b-b96e-a22affac51df",
         *           "completed_at": "2024-12-04T18:44:57.664586Z",
         *           "donation_matches": [
         *             {
         *               "active": true,
         *               "amount": {
         *                 "currency": "USD",
         *                 "value": "182.32"
         *               },
         *               "completed_at": "2024-12-04T18:44:57.665954Z",
         *               "donation_id": "0a88b8d3-d2e3-45ba-bc26-69c2e4e0082d",
         *               "ends_at": "2024-12-04T18:44:57.665949Z",
         *               "id": "0cf63379-a867-4065-96d6-9c6d9d35168f",
         *               "inserted_at": "2024-12-04T18:44:57.665931Z",
         *               "matched_by": "Big Donor 1",
         *               "pledged_amount": {
         *                 "currency": "USD",
         *                 "value": "182.32"
         *               },
         *               "started_at_amount": {
         *                 "currency": "USD",
         *                 "value": "182.32"
         *               },
         *               "starts_at": "2024-12-04T18:44:57.665945Z",
         *               "total_amount_raised": {
         *                 "currency": "USD",
         *                 "value": "182.32"
         *               },
         *               "updated_at": "2024-12-04T18:44:57.665941Z"
         *             }
         *           ],
         *           "donor_comment": "Keep up the great work!",
         *           "donor_name": "Test Name",
         *           "fundraising_event_id": "706419b7-2dcb-426f-869b-1cbd1307ad48",
         *           "id": "40c4ca60-c796-4599-8983-324afbe5b7d3",
         *           "legacy_id": 951026131,
         *           "poll_id": "394f60d8-f962-4ba9-8a45-16481de78538",
         *           "poll_option_id": "d6595c8b-25ac-4d46-b69d-fc5a52b8d237",
         *           "reward_claims": [
         *             {
         *               "id": "6805801e-07d0-4268-b772-b75c50a8050c",
         *               "quantity": 1,
         *               "reward_id": "7816759e-7ce5-48c7-bb01-6dd4e5121dd8"
         *             }
         *           ],
         *           "reward_id": "4f561d8a-43bd-4439-a846-856226a8ed32",
         *           "sustained": false,
         *           "target_id": "aafbf1e9-6bd9-4c4c-976e-d66f4630502d",
         *           "team_event_id": "3b7a8873-1d18-450c-a03b-dbbf720dd7e4"
         *         }
         *       ],
         *       "metadata": {
         *         "after": "bGlnaHQgwd==",
         *         "before": null,
         *         "limit": 10
         *       }
         *     }
         */
        DonationPaginatedResponse: {
            data?: components["schemas"]["Donation"][];
            /** @example {
             *       "after": "bGlnaHQgwd==",
             *       "before": null,
             *       "limit": 10
             *     } */
            metadata?: {
                /** @description The cursor to the next page if it exists */
                after: string | null;
                /** @description The cursor to the previous page if it exists */
                before: string | null;
                /** @description The requested record limit */
                limit: number;
            };
        } & components["schemas"]["PaginatedResponse"];
        /**
         * PollPaginatedResponse
         * @example {
         *       "data": [
         *         {
         *           "active": true,
         *           "amount_raised": {
         *             "currency": "USD",
         *             "value": "182.32"
         *           },
         *           "id": "0eefb836-f0f5-4fc8-aa10-b173b3ad02e3",
         *           "inserted_at": "2024-12-04T18:44:58.078619Z",
         *           "legacy_id": 206514673,
         *           "name": "Learn a TikTok dance live!",
         *           "options": [
         *             {
         *               "amount_raised": {
         *                 "currency": "USD",
         *                 "value": "182.32"
         *               },
         *               "id": "d7dff5b5-d924-47cb-93c5-5976d0b23850",
         *               "inserted_at": "2024-12-04T18:44:58.079363Z",
         *               "legacy_id": 113780794,
         *               "name": "Learn a TikTok dance live!",
         *               "updated_at": "2024-12-04T18:44:58.079377Z"
         *             },
         *             {
         *               "amount_raised": {
         *                 "currency": "USD",
         *                 "value": "182.32"
         *               },
         *               "id": "d7dff5b5-d924-47cb-93c5-5976d0b23850",
         *               "inserted_at": "2024-12-04T18:44:58.079363Z",
         *               "legacy_id": 113780794,
         *               "name": "Learn a TikTok dance live!",
         *               "updated_at": "2024-12-04T18:44:58.079377Z"
         *             },
         *             {
         *               "amount_raised": {
         *                 "currency": "USD",
         *                 "value": "182.32"
         *               },
         *               "id": "d7dff5b5-d924-47cb-93c5-5976d0b23850",
         *               "inserted_at": "2024-12-04T18:44:58.079363Z",
         *               "legacy_id": 113780794,
         *               "name": "Learn a TikTok dance live!",
         *               "updated_at": "2024-12-04T18:44:58.079377Z"
         *             }
         *           ],
         *           "updated_at": "2024-12-04T18:44:58.155032Z"
         *         }
         *       ],
         *       "metadata": {
         *         "after": "bGlnaHQgwd==",
         *         "before": null,
         *         "limit": 10
         *       }
         *     }
         */
        PollPaginatedResponse: {
            data?: components["schemas"]["Poll"][];
            /** @example {
             *       "after": "bGlnaHQgwd==",
             *       "before": null,
             *       "limit": 10
             *     } */
            metadata?: {
                /** @description The cursor to the next page if it exists */
                after: string | null;
                /** @description The cursor to the previous page if it exists */
                before: string | null;
                /** @description The requested record limit */
                limit: number;
            };
        } & components["schemas"]["PaginatedResponse"];
        /**
         * AuctionItemPaginatedResponse
         * @example {
         *       "data": [
         *         {
         *           "activated_at": "2024-12-04T18:44:56.213944Z",
         *           "completed_at": "2024-12-04T18:44:56.213962Z",
         *           "description": "My Awesome weekend auction item.",
         *           "ends_at": "2024-12-04T18:44:56.213967Z",
         *           "fair_market_value": {
         *             "currency": "USD",
         *             "value": "182.32"
         *           },
         *           "id": "f3ba4bb9-b53e-4c84-a300-3514a0e4d796",
         *           "images": [
         *             {
         *               "alt": "Short image description used as alternative text.",
         *               "height": 200,
         *               "src": "https://tiltify.com/images/example.jpg",
         *               "width": 200
         *             }
         *           ],
         *           "inserted_at": "2024-12-04T18:44:57.507990Z",
         *           "legal": "This is a legal disclaimer.",
         *           "name": "My Awesome Auction Item",
         *           "rules": "To bid you must be in the USA.",
         *           "short_description": "short auction item.",
         *           "starting_bid": {
         *             "currency": "USD",
         *             "value": "182.32"
         *           },
         *           "starts_at": "2024-12-04T18:44:57.508000Z",
         *           "status": "active"
         *         }
         *       ],
         *       "metadata": {
         *         "after": "bGlnaHQgwd==",
         *         "before": null,
         *         "limit": 10
         *       }
         *     }
         */
        AuctionItemPaginatedResponse: {
            data?: components["schemas"]["AuctionItem"][];
            /** @example {
             *       "after": "bGlnaHQgwd==",
             *       "before": null,
             *       "limit": 10
             *     } */
            metadata?: {
                /** @description The cursor to the next page if it exists */
                after: string | null;
                /** @description The cursor to the previous page if it exists */
                before: string | null;
                /** @description The requested record limit */
                limit: number;
            };
        } & components["schemas"]["PaginatedResponse"];
        /**
         * CauseResponse
         * @example {
         *       "data": {
         *         "avatar": {
         *           "alt": "Short image description used as alternative text.",
         *           "height": 200,
         *           "src": "https://tiltify.com/images/example.jpg",
         *           "width": 200
         *         },
         *         "contact": {
         *           "address_line1": "22251 Bahringer Turnpike",
         *           "address_line2": null,
         *           "city": "Bright Tree Village",
         *           "country": "Outer Rim",
         *           "email": "contact@erf.test",
         *           "postal_code": "20001",
         *           "region": "Endor"
         *         },
         *         "currency_code": "USD",
         *         "description": "Ewok Rescue Foundation (ERF) works around the forest moon of Endor to promote the most effective Ewok protection. Join us and help us to build a better Endor!",
         *         "government_id": "12-3456789",
         *         "id": "2d08932c-82ad-4d64-bbf9-09e4ec39ed1d",
         *         "inserted_at": "2024-12-04T18:44:57.096364Z",
         *         "legacy_id": 575676436,
         *         "name": "Ewok Rescue Foundation",
         *         "short_description": "ERF works in Endor to protect the Ewoks",
         *         "slug": "ewok-rescue-foundation",
         *         "social": {
         *           "discord": "https://discord.gg/tiltify",
         *           "facebook": "tiltify",
         *           "instagram": "tiltify",
         *           "snapchat": "tiltify",
         *           "tiktok": "tilitfy",
         *           "twitch": "tilitfy",
         *           "twitter": "tiltify",
         *           "website": "https://tiltify.com",
         *           "youtube": "UCWcPgWbuWuJX5rHWm6Kb4Vw"
         *         },
         *         "updated_at": "2024-12-04T18:44:57.096391Z"
         *       }
         *     }
         */
        CauseResponse: {
            data?: components["schemas"]["Cause"];
        };
        /**
         * LeaderboardEntryPaginatedResponse
         * @example {
         *       "data": [
         *         {
         *           "amount": {
         *             "currency": "USD",
         *             "value": "182.32"
         *           },
         *           "avatar": {
         *             "alt": "Short image description used as alternative text.",
         *             "height": 200,
         *             "src": "https://tiltify.com/images/example.jpg",
         *             "width": 200
         *           },
         *           "heat": null,
         *           "id": "875726e3-b9a5-45d3-8c15-697da67174f8",
         *           "name": "Awesome Team",
         *           "url": "https://tiltify.com/+awesome-team"
         *         }
         *       ],
         *       "metadata": {
         *         "after": "bGlnaHQgwd==",
         *         "before": null,
         *         "limit": 10
         *       }
         *     }
         */
        LeaderboardEntryPaginatedResponse: {
            data?: components["schemas"]["LeaderboardEntry"][];
            /** @example {
             *       "after": "bGlnaHQgwd==",
             *       "before": null,
             *       "limit": 10
             *     } */
            metadata?: {
                /** @description The cursor to the next page if it exists */
                after: string | null;
                /** @description The cursor to the previous page if it exists */
                before: string | null;
                /** @description The requested record limit */
                limit: number;
            };
        } & components["schemas"]["PaginatedResponse"];
        /**
         * TeamMember
         * @example {
         *       "id": "fe4a16cb-3a9d-4e7c-8075-e662f8c168d0",
         *       "inserted_at": "2024-12-04T18:44:55.848383Z",
         *       "legacy_id": 834063197,
         *       "roles": [
         *         {
         *           "id": "ebf8fcb3-f0b0-4cc6-bea3-6ffe73d6e781",
         *           "key": "team_super_admin",
         *           "name": "Team Administrator"
         *         }
         *       ],
         *       "updated_at": "2024-12-04T18:44:56.995758Z",
         *       "user": {
         *         "avatar": {
         *           "alt": "Short image description used as alternative text.",
         *           "height": 200,
         *           "src": "https://tiltify.com/images/example.jpg",
         *           "width": 200
         *         },
         *         "description": "Professional twitch streamer who likes charity!",
         *         "id": "198ec291-7fc3-41a4-b408-18b1f936e4a8",
         *         "legacy_id": 121506308,
         *         "slug": "username",
         *         "social": {
         *           "discord": "https://discord.gg/tiltify",
         *           "facebook": "tiltify",
         *           "instagram": "tiltify",
         *           "snapchat": "tiltify",
         *           "tiktok": "tilitfy",
         *           "twitch": "tilitfy",
         *           "twitter": "tiltify",
         *           "website": "https://tiltify.com",
         *           "youtube": "UCWcPgWbuWuJX5rHWm6Kb4Vw"
         *         },
         *         "total_amount_raised": {
         *           "currency": "USD",
         *           "value": "182.32"
         *         },
         *         "url": "https://tiltify.com/@username",
         *         "username": "UserName"
         *       }
         *     }
         */
        TeamMember: {
            id: components["schemas"]["PublicId"];
            /**
             * Format: date-time
             * @description When the team member was created
             */
            inserted_at: string;
            legacy_id: components["schemas"]["LegacyId"];
            /** @description A list of the team member's roles */
            roles: components["schemas"]["Role"][];
            /**
             * Format: date-time
             * @description When the team member was last updated
             */
            updated_at: string;
            user: components["schemas"]["User"];
        };
        /**
         * FitnessGoal
         * @example {
         *       "current_value": "44.4",
         *       "distance_unit": "mile",
         *       "goal": "1000",
         *       "id": "f169e6b3-250f-4973-bb2c-b89cfc0961e3",
         *       "type": "Running"
         *     }
         */
        FitnessGoal: {
            /** @description The Fitness Goal total amount */
            current_value: string;
            /**
             * @description The Fitness Goal distance unit if it exists
             * @enum {string|null}
             */
            distance_unit: "meter" | "kilometer" | "mile" | null;
            /** @description The Fitness Goal goal amount */
            goal: string;
            /** @description Unique Identifier for the fitness goal. */
            id: components["schemas"]["PublicId"];
            /**
             * @description The Fitness Goal Type
             * @enum {string}
             */
            type: "Cycling" | "Dancing" | "Other" | "Running" | "Swimming" | "Walking" | "Workout" | "Rowing";
        };
        /**
         * MeasuredUnit
         * @description Schema defining measurable amount in given unit
         * @example {
         *       "unit": "mile",
         *       "value": "182.11"
         *     }
         */
        MeasuredUnit: {
            /**
             * @description measured unit
             * @enum {string}
             */
            unit: "seconds" | "kilometer" | "mile";
            /** @description Monetary amount */
            value: string;
        } | null;
        /**
         * TeamMemberPaginatedResponse
         * @example {
         *       "data": [
         *         {
         *           "id": "fe4a16cb-3a9d-4e7c-8075-e662f8c168d0",
         *           "inserted_at": "2024-12-04T18:44:55.848383Z",
         *           "legacy_id": 834063197,
         *           "roles": [
         *             {
         *               "id": "ebf8fcb3-f0b0-4cc6-bea3-6ffe73d6e781",
         *               "key": "team_super_admin",
         *               "name": "Team Administrator"
         *             }
         *           ],
         *           "updated_at": "2024-12-04T18:44:56.995758Z",
         *           "user": {
         *             "avatar": {
         *               "alt": "Short image description used as alternative text.",
         *               "height": 200,
         *               "src": "https://tiltify.com/images/example.jpg",
         *               "width": 200
         *             },
         *             "description": "Professional twitch streamer who likes charity!",
         *             "id": "198ec291-7fc3-41a4-b408-18b1f936e4a8",
         *             "legacy_id": 121506308,
         *             "slug": "username",
         *             "social": {
         *               "discord": "https://discord.gg/tiltify",
         *               "facebook": "tiltify",
         *               "instagram": "tiltify",
         *               "snapchat": "tiltify",
         *               "tiktok": "tilitfy",
         *               "twitch": "tilitfy",
         *               "twitter": "tiltify",
         *               "website": "https://tiltify.com",
         *               "youtube": "UCWcPgWbuWuJX5rHWm6Kb4Vw"
         *             },
         *             "total_amount_raised": {
         *               "currency": "USD",
         *               "value": "182.32"
         *             },
         *             "url": "https://tiltify.com/@username",
         *             "username": "UserName"
         *           }
         *         }
         *       ],
         *       "metadata": {
         *         "after": "bGlnaHQgwd==",
         *         "before": null,
         *         "limit": 10
         *       }
         *     }
         */
        TeamMemberPaginatedResponse: {
            data?: components["schemas"]["TeamMember"][];
            /** @example {
             *       "after": "bGlnaHQgwd==",
             *       "before": null,
             *       "limit": 10
             *     } */
            metadata?: {
                /** @description The cursor to the next page if it exists */
                after: string | null;
                /** @description The cursor to the previous page if it exists */
                before: string | null;
                /** @description The requested record limit */
                limit: number;
            };
        } & components["schemas"]["PaginatedResponse"];
        /**
         * GiftMatch
         * @example {
         *       "active": true,
         *       "amount": {
         *         "currency": "USD",
         *         "value": "182.32"
         *       },
         *       "completed_at": "2024-12-04T18:44:57.768361Z",
         *       "contribution_id": "70fcee30-0201-442d-8dd8-1b7f1a8e252c",
         *       "ends_at": "2024-12-04T18:44:57.768357Z",
         *       "id": "566070f5-8035-4cbb-886d-ed5cf5548a12",
         *       "inserted_at": "2024-12-04T18:44:57.768334Z",
         *       "matched_by": "Big Donor 1",
         *       "pledged_amount": {
         *         "currency": "USD",
         *         "value": "182.32"
         *       },
         *       "started_at_amount": {
         *         "currency": "USD",
         *         "value": "182.32"
         *       },
         *       "starts_at": "2024-12-04T18:44:57.768354Z",
         *       "total_amount_raised": {
         *         "currency": "USD",
         *         "value": "182.32"
         *       },
         *       "updated_at": "2024-12-04T18:44:57.768350Z"
         *     }
         */
        GiftMatch: {
            /** @description Whether or not the donation match is active */
            active: boolean;
            /** @description The amount of the donation match. */
            amount: components["schemas"]["Money"];
            /**
             * Format: date-time
             * @description Moment when the donation match completed
             */
            completed_at: string | null;
            /** @description Unique Identifier for the donation matches contribution. */
            contribution_id: components["schemas"]["PublicId"] | null;
            /**
             * Format: date-time
             * @description Moment when the donation match ends
             */
            ends_at: string;
            /** @description Unique Identifier for the donation match. */
            id: components["schemas"]["PublicId"];
            /**
             * Format: date-time
             * @description Moment when the donation match was created
             */
            inserted_at: string;
            /** @description The type of the match, either 'all' or 'amount' */
            match_type?: string;
            /** @description The name of the person who started the donation match */
            matched_by: string;
            /** @description The amount the donation match has pledged. */
            pledged_amount: components["schemas"]["Money"];
            /** @description The amount raised the campaign had when the donation match was started. */
            started_at_amount: components["schemas"]["Money"];
            /**
             * Format: date-time
             * @description Moment when the donation match starts
             */
            starts_at: string;
            /** @description The amount the donation match has raised. */
            total_amount_raised: components["schemas"]["Money"];
            /**
             * Format: date-time
             * @description Moment when the donation match was last updated
             */
            updated_at: string;
        };
        /**
         * Image
         * @description An Image includes the html properties necessary to render an <img> tag
         * @example {
         *       "alt": "Short image description used as alternative text.",
         *       "height": 200,
         *       "src": "https://tiltify.com/images/example.jpg",
         *       "width": 200
         *     }
         */
        Image: {
            /** @description Short description of the image */
            alt: string | null;
            /** @description Height of the image. */
            height: number | null;
            /** @description Full URL of the image. */
            src: string;
            /** @description Width of the image. */
            width: number | null;
        } | null;
        /**
         * LegacyRelayResponse
         * @example {
         *       "data": {
         *         "amount": "20.20",
         *         "anonymous": false,
         *         "currency": "USD",
         *         "donor_comment": "Keep up the good work!",
         *         "donor_name": "us3rn4m3",
         *         "meta": {
         *           "foo": "bar",
         *           "yourtoken": "can be anything"
         *         },
         *         "payment_status": "completed",
         *         "uuid": "5dfc96ef-bf2e-41ad-817c-c245b1045125"
         *       }
         *     }
         */
        LegacyRelayResponse: {
            data?: components["schemas"]["LegacyRelay"];
        };
        /**
         * ContributionPaginatedResponse
         * @example {
         *       "data": [
         *         {
         *           "amount": {
         *             "currency": "USD",
         *             "value": "182.32"
         *           },
         *           "completed_at": "2024-12-04T18:44:57.593540Z",
         *           "donor_comment": "Keep up the great work!",
         *           "donor_name": "Test Name",
         *           "gift_matches": [],
         *           "id": "e3dd707f-d279-4616-8406-dad6c65da792",
         *           "is_match": false,
         *           "personal_campaign_id": "1a82b4ab-2a6d-46da-8d7a-705db75762f6",
         *           "poll_id": "d1ea4e1c-172a-441c-8f43-532c03d8bf2c",
         *           "poll_option_id": "dbff8934-8fa2-45fa-bdfe-1af3d92ee38f",
         *           "reward_claims": [
         *             {
         *               "id": "8104e4c6-7477-4a69-bad1-227b36e48cac",
         *               "quantity": 1,
         *               "reward_id": "42ac9d62-d486-4b18-8c7a-c47f96991666"
         *             }
         *           ],
         *           "target_id": "f204ce26-e0ca-4156-aed8-16dab461991d"
         *         }
         *       ],
         *       "metadata": {
         *         "after": "bGlnaHQgwd==",
         *         "before": null,
         *         "limit": 10
         *       }
         *     }
         */
        ContributionPaginatedResponse: {
            data?: components["schemas"]["Contribution"][];
            /** @example {
             *       "after": "bGlnaHQgwd==",
             *       "before": null,
             *       "limit": 10
             *     } */
            metadata?: {
                /** @description The cursor to the next page if it exists */
                after: string | null;
                /** @description The cursor to the previous page if it exists */
                before: string | null;
                /** @description The requested record limit */
                limit: number;
            };
        } & components["schemas"]["PaginatedResponse"];
        /**
         * DonationMatchPaginatedResponse
         * @example {
         *       "data": [
         *         {
         *           "active": true,
         *           "amount": {
         *             "currency": "USD",
         *             "value": "182.32"
         *           },
         *           "completed_at": "2024-12-04T18:44:57.665954Z",
         *           "donation_id": "0a88b8d3-d2e3-45ba-bc26-69c2e4e0082d",
         *           "ends_at": "2024-12-04T18:44:57.665949Z",
         *           "id": "0cf63379-a867-4065-96d6-9c6d9d35168f",
         *           "inserted_at": "2024-12-04T18:44:57.665931Z",
         *           "matched_by": "Big Donor 1",
         *           "pledged_amount": {
         *             "currency": "USD",
         *             "value": "182.32"
         *           },
         *           "started_at_amount": {
         *             "currency": "USD",
         *             "value": "182.32"
         *           },
         *           "starts_at": "2024-12-04T18:44:57.665945Z",
         *           "total_amount_raised": {
         *             "currency": "USD",
         *             "value": "182.32"
         *           },
         *           "updated_at": "2024-12-04T18:44:57.665941Z"
         *         }
         *       ],
         *       "metadata": {
         *         "after": "bGlnaHQgwd==",
         *         "before": null,
         *         "limit": 10
         *       }
         *     }
         */
        DonationMatchPaginatedResponse: {
            data?: components["schemas"]["DonationMatch"][];
            /** @example {
             *       "after": "bGlnaHQgwd==",
             *       "before": null,
             *       "limit": 10
             *     } */
            metadata?: {
                /** @description The cursor to the next page if it exists */
                after: string | null;
                /** @description The cursor to the previous page if it exists */
                before: string | null;
                /** @description The requested record limit */
                limit: number;
            };
        } & components["schemas"]["PaginatedResponse"];
        /**
         * Donation
         * @example {
         *       "amount": {
         *         "currency": "USD",
         *         "value": "182.32"
         *       },
         *       "campaign_id": "45e72d40-4d56-4c8a-8fee-a57b709cf5ff",
         *       "cause_id": "f9368db2-bbc1-4f7b-b96e-a22affac51df",
         *       "completed_at": "2024-12-04T18:44:57.664586Z",
         *       "donation_matches": [
         *         {
         *           "active": true,
         *           "amount": {
         *             "currency": "USD",
         *             "value": "182.32"
         *           },
         *           "completed_at": "2024-12-04T18:44:57.665954Z",
         *           "donation_id": "0a88b8d3-d2e3-45ba-bc26-69c2e4e0082d",
         *           "ends_at": "2024-12-04T18:44:57.665949Z",
         *           "id": "0cf63379-a867-4065-96d6-9c6d9d35168f",
         *           "inserted_at": "2024-12-04T18:44:57.665931Z",
         *           "matched_by": "Big Donor 1",
         *           "pledged_amount": {
         *             "currency": "USD",
         *             "value": "182.32"
         *           },
         *           "started_at_amount": {
         *             "currency": "USD",
         *             "value": "182.32"
         *           },
         *           "starts_at": "2024-12-04T18:44:57.665945Z",
         *           "total_amount_raised": {
         *             "currency": "USD",
         *             "value": "182.32"
         *           },
         *           "updated_at": "2024-12-04T18:44:57.665941Z"
         *         }
         *       ],
         *       "donor_comment": "Keep up the great work!",
         *       "donor_name": "Test Name",
         *       "fundraising_event_id": "706419b7-2dcb-426f-869b-1cbd1307ad48",
         *       "id": "40c4ca60-c796-4599-8983-324afbe5b7d3",
         *       "legacy_id": 951026131,
         *       "poll_id": "394f60d8-f962-4ba9-8a45-16481de78538",
         *       "poll_option_id": "d6595c8b-25ac-4d46-b69d-fc5a52b8d237",
         *       "reward_claims": [
         *         {
         *           "id": "6805801e-07d0-4268-b772-b75c50a8050c",
         *           "quantity": 1,
         *           "reward_id": "7816759e-7ce5-48c7-bb01-6dd4e5121dd8"
         *         }
         *       ],
         *       "reward_id": "4f561d8a-43bd-4439-a846-856226a8ed32",
         *       "sustained": false,
         *       "target_id": "aafbf1e9-6bd9-4c4c-976e-d66f4630502d",
         *       "team_event_id": "3b7a8873-1d18-450c-a03b-dbbf720dd7e4"
         *     }
         */
        Donation: {
            /** @description The amount donated. */
            amount: components["schemas"]["Money"];
            /** @description ID of the campaign donated to */
            campaign_id: components["schemas"]["PublicId"] | null;
            /** @description ID of the cause donated to */
            cause_id: components["schemas"]["PublicId"];
            /**
             * Format: date-time
             * @description Timestamp of when the donation was completed.
             */
            completed_at: string | null;
            donation_matches: components["schemas"]["DonationMatch"][] | null;
            /** @description Note left by donor */
            donor_comment: string | null;
            /** @description Publically visible donor name. This may be set to 'Anonymous' if the donation was anonymous or moderated. */
            donor_name: string;
            /** @description ID of the fundraising event donated to */
            fundraising_event_id: components["schemas"]["PublicId"] | null;
            /** @description Unique Identifier for the donation. */
            id: components["schemas"]["PublicId"];
            legacy_id: components["schemas"]["LegacyId"];
            /** @description The ID for a Poll, if one was donated toward. */
            poll_id: components["schemas"]["PublicId"] | null;
            /** @description The ID for a PollOption, if one was donated toward. */
            poll_option_id: components["schemas"]["PublicId"] | null;
            reward_claims: components["schemas"]["RewardClaim"][] | null;
            /**
             * @deprecated
             * @description The ID for a Reward, if one was donated toward. Deprecated because donations may now have multiple rewards.
             */
            reward_id: components["schemas"]["PublicId"] | null;
            /** @description Whether or not the donation is a part of a monthly donation. */
            sustained: boolean | null;
            /** @description The ID for a Target, if one was donated toward. */
            target_id: components["schemas"]["PublicId"] | null;
            /** @description The ID of a team event if it exists */
            team_event_id: components["schemas"]["PublicId"] | null;
        };
        /**
         * TeamCampaignPaginatedResponse
         * @example {
         *       "data": [
         *         {
         *           "amount_raised": {
         *             "currency": "USD",
         *             "value": "182.32"
         *           },
         *           "avatar": {
         *             "alt": "Short image description used as alternative text.",
         *             "height": 200,
         *             "src": "https://tiltify.com/images/example.jpg",
         *             "width": 200
         *           },
         *           "currency_code": "USD",
         *           "description": "Let's fundraise togehter",
         *           "donate_url": "https://donate.tiltify.com/+team-slug/our-awesome-team-campaign",
         *           "goal": {
         *             "currency": "USD",
         *             "value": "182.32"
         *           },
         *           "has_schedule": false,
         *           "id": "a5c01bbf-3a1f-4b11-b66d-ef2dd82e02cf",
         *           "inserted_at": "2024-12-04T18:44:58.228470Z",
         *           "legacy_id": 122017552,
         *           "livestream": {
         *             "channel": "tiltify",
         *             "type": "twitch"
         *           },
         *           "name": "Our Awesome Team Campaign",
         *           "original_goal": {
         *             "currency": "USD",
         *             "value": "182.32"
         *           },
         *           "published_at": "2024-12-04T18:44:58.228496Z",
         *           "retired_at": null,
         *           "slug": "our-awesome-team-campaign",
         *           "status": "published",
         *           "supportable": "none",
         *           "supporting_amount_raised": {
         *             "currency": "USD",
         *             "value": "182.32"
         *           },
         *           "team": {
         *             "avatar": {
         *               "alt": "Short image description used as alternative text.",
         *               "height": 200,
         *               "src": "https://tiltify.com/images/example.jpg",
         *               "width": 200
         *             },
         *             "description": "Awesome group of friends fundraising for charity together.",
         *             "id": "1384e7cb-929c-4416-b897-8240be75c640",
         *             "legacy_id": 384857859,
         *             "name": "Awesome Team",
         *             "slug": "awesome-team",
         *             "social": {
         *               "discord": "https://discord.gg/tiltify",
         *               "facebook": "tiltify",
         *               "instagram": "tiltify",
         *               "snapchat": "tiltify",
         *               "tiktok": "tilitfy",
         *               "twitch": "tilitfy",
         *               "twitter": "tiltify",
         *               "website": "https://tiltify.com",
         *               "youtube": "UCWcPgWbuWuJX5rHWm6Kb4Vw"
         *             },
         *             "total_amount_raised": {
         *               "currency": "USD",
         *               "value": "182.32"
         *             },
         *             "url": "https://tiltify.com/+awesome-team"
         *           },
         *           "team_id": "625397c8-c59d-405b-b413-82fa51f513ff",
         *           "total_amount_raised": {
         *             "currency": "USD",
         *             "value": "182.32"
         *           },
         *           "updated_at": "2024-12-04T18:44:58.228505Z",
         *           "url": "https://tiltify.com/+team-slug/our-awesome-team-campaign"
         *         }
         *       ],
         *       "metadata": {
         *         "after": "bGlnaHQgwd==",
         *         "before": null,
         *         "limit": 10
         *       }
         *     }
         */
        TeamCampaignPaginatedResponse: {
            data?: components["schemas"]["TeamCampaign"][];
            /** @example {
             *       "after": "bGlnaHQgwd==",
             *       "before": null,
             *       "limit": 10
             *     } */
            metadata?: {
                /** @description The cursor to the next page if it exists */
                after: string | null;
                /** @description The cursor to the previous page if it exists */
                before: string | null;
                /** @description The requested record limit */
                limit: number;
            };
        } & components["schemas"]["PaginatedResponse"];
        /**
         * AuctionBid
         * @example {
         *       "amount": {
         *         "currency": "USD",
         *         "value": "182.32"
         *       },
         *       "auction_house_id": "406abed8-a138-4ca3-94a3-e8aaca72eeb2",
         *       "auction_item_id": "355c5005-94c7-48b3-9ec5-9acf78bb2607",
         *       "current_winner": false,
         *       "id": "1062fb0c-8fd0-4990-ba72-c3ba06f1ec81",
         *       "inserted_at": "2024-12-04T18:44:57.430361Z",
         *       "public_name": "John Doe",
         *       "removed_at": "2024-12-04T18:44:57.430377Z",
         *       "updated_at": "2024-12-04T18:44:57.430373Z"
         *     }
         */
        AuctionBid: {
            /** @description The amount of the bid */
            amount: components["schemas"]["Money"];
            /** @description The ID for the auction house of this auction bid. */
            auction_house_id: components["schemas"]["PublicId"];
            /** @description The ID for the auction item of this auction bid. */
            auction_item_id: components["schemas"]["PublicId"];
            /** @description Whether or not this bid is the current winning bid */
            current_winner: boolean;
            id: components["schemas"]["PublicId"];
            /**
             * Format: date-time
             * @description When the auction bid was created
             */
            inserted_at: string | null;
            /** @description The public name of the bidder */
            public_name: string;
            /**
             * Format: date-time
             * @description When the auction bid was removed
             */
            removed_at: string | null;
            /**
             * Format: date-time
             * @description When the auction bid was updated
             */
            updated_at: string | null;
        };
        /**
         * ConfiguredLeaderboardResponse
         * @example {
         *       "data": {
         *         "team": [],
         *         "user": [],
         *         "weekly": []
         *       }
         *     }
         */
        ConfiguredLeaderboardResponse: {
            data?: components["schemas"]["ConfiguredLeaderboard"];
        };
        /**
         * Url
         * @description This is the full url used for the given resource.
         * @example https://tiltify.com/@username/campaign-slug
         */
        Url: string;
        /**
         * EventPaginatedResponse
         * @example {
         *       "data": [
         *         {
         *           "amount_raised": {
         *             "currency": "USD",
         *             "value": "182.32"
         *           },
         *           "avatar": {
         *             "alt": "Short image description used as alternative text.",
         *             "height": 200,
         *             "src": "https://tiltify.com/images/example.jpg",
         *             "width": 200
         *           },
         *           "cause_id": "d1338356-10c8-4327-b93d-00170b2369c6",
         *           "description": "My Awesome weekend campaign.",
         *           "donate_url": "https://donate.tiltify.com/@username/my-awesome-campaign",
         *           "fundraising_event_id": "06e67cd8-748a-4e02-9e30-ad2e34120d49",
         *           "goal": {
         *             "currency": "USD",
         *             "value": "182.32"
         *           },
         *           "has_schedule": false,
         *           "id": "4d17a04b-88c8-46aa-80d0-2d739ddfa687",
         *           "inserted_at": "2024-12-04T18:44:57.507620Z",
         *           "legacy_id": 923436858,
         *           "livestream": {
         *             "channel": "tiltify",
         *             "type": "twitch"
         *           },
         *           "name": "My Awesome Campaign",
         *           "original_goal": {
         *             "currency": "USD",
         *             "value": "182.32"
         *           },
         *           "published_at": "2024-12-04T18:44:57.507646Z",
         *           "retired_at": null,
         *           "slug": "my-awesome-campaign",
         *           "status": "published",
         *           "supporting_type": "none",
         *           "total_amount_raised": {
         *             "currency": "USD",
         *             "value": "182.32"
         *           },
         *           "updated_at": "2024-12-04T18:44:57.507651Z",
         *           "url": "https://tiltify.com/@username/my-awesome-campaign",
         *           "user": {
         *             "avatar": {
         *               "alt": "Short image description used as alternative text.",
         *               "height": 200,
         *               "src": "https://tiltify.com/images/example.jpg",
         *               "width": 200
         *             },
         *             "description": "Professional twitch streamer who likes charity!",
         *             "id": "198ec291-7fc3-41a4-b408-18b1f936e4a8",
         *             "legacy_id": 121506308,
         *             "slug": "username",
         *             "social": {
         *               "discord": "https://discord.gg/tiltify",
         *               "facebook": "tiltify",
         *               "instagram": "tiltify",
         *               "snapchat": "tiltify",
         *               "tiktok": "tilitfy",
         *               "twitch": "tilitfy",
         *               "twitter": "tiltify",
         *               "website": "https://tiltify.com",
         *               "youtube": "UCWcPgWbuWuJX5rHWm6Kb4Vw"
         *             },
         *             "total_amount_raised": {
         *               "currency": "USD",
         *               "value": "182.32"
         *             },
         *             "url": "https://tiltify.com/@username",
         *             "username": "UserName"
         *           },
         *           "user_id": "b308b5f8-b4d5-4d70-b705-ad2df5a6557a"
         *         }
         *       ],
         *       "metadata": {
         *         "after": "bGlnaHQgwd==",
         *         "before": null,
         *         "limit": 10
         *       }
         *     }
         */
        EventPaginatedResponse: {
            data?: components["schemas"]["Event"][];
            /** @example {
             *       "after": "bGlnaHQgwd==",
             *       "before": null,
             *       "limit": 10
             *     } */
            metadata?: {
                /** @description The cursor to the next page if it exists */
                after: string | null;
                /** @description The cursor to the previous page if it exists */
                before: string | null;
                /** @description The requested record limit */
                limit: number;
            };
        } & components["schemas"]["PaginatedResponse"];
        /**
         * Team
         * @example {
         *       "avatar": {
         *         "alt": "Short image description used as alternative text.",
         *         "height": 200,
         *         "src": "https://tiltify.com/images/example.jpg",
         *         "width": 200
         *       },
         *       "description": "Awesome group of friends fundraising for charity together.",
         *       "id": "1384e7cb-929c-4416-b897-8240be75c640",
         *       "legacy_id": 384857859,
         *       "name": "Awesome Team",
         *       "slug": "awesome-team",
         *       "social": {
         *         "discord": "https://discord.gg/tiltify",
         *         "facebook": "tiltify",
         *         "instagram": "tiltify",
         *         "snapchat": "tiltify",
         *         "tiktok": "tilitfy",
         *         "twitch": "tilitfy",
         *         "twitter": "tiltify",
         *         "website": "https://tiltify.com",
         *         "youtube": "UCWcPgWbuWuJX5rHWm6Kb4Vw"
         *       },
         *       "total_amount_raised": {
         *         "currency": "USD",
         *         "value": "182.32"
         *       },
         *       "url": "https://tiltify.com/+awesome-team"
         *     }
         */
        Team: {
            avatar: components["schemas"]["Image"];
            /** @description The description section on a team's profile. */
            description: string | null;
            id: components["schemas"]["PublicId"];
            legacy_id: components["schemas"]["LegacyId"];
            /** @description The team's name */
            name: string;
            slug: components["schemas"]["Slug"];
            social: components["schemas"]["Social"];
            /** @description The total amount raised by this user represented in USD. */
            total_amount_raised: components["schemas"]["Money"];
            /** @description This is the full url for the team profile. */
            url: components["schemas"]["Url"];
        };
        /**
         * LeaderboardEntry
         * @example {
         *       "amount": {
         *         "currency": "USD",
         *         "value": "182.32"
         *       },
         *       "avatar": {
         *         "alt": "Short image description used as alternative text.",
         *         "height": 200,
         *         "src": "https://tiltify.com/images/example.jpg",
         *         "width": 200
         *       },
         *       "heat": null,
         *       "id": "875726e3-b9a5-45d3-8c15-697da67174f8",
         *       "name": "Awesome Team",
         *       "url": "https://tiltify.com/+awesome-team"
         *     }
         */
        LeaderboardEntry: {
            /** @description The total amount raised by this leaderboard entry. */
            amount: components["schemas"]["Money"] | components["schemas"]["MeasuredUnit"];
            avatar: components["schemas"]["Image"];
            /** @description The change in place of this entry */
            heat: number | null;
            id: components["schemas"]["PublicId"];
            /** @description The team's name */
            name: string;
            /** @description This is the full url for the team profile. */
            url: components["schemas"]["Url"] | null;
        };
        /**
         * PersonalCampaignResponse
         * @example {
         *       "data": {
         *         "amount_raised": {
         *           "currency": "USD",
         *           "value": "182.32"
         *         },
         *         "avatar": {
         *           "alt": "Short image description used as alternative text.",
         *           "height": 200,
         *           "src": "https://tiltify.com/images/example.jpg",
         *           "width": 200
         *         },
         *         "description": "My Awesome weekend campaign.",
         *         "donate_url": "https://give.tiltify.com/6f81bf48-36c0-4a5e-b0b6-d6f21b22348d",
         *         "fundraising_for_name": "ME!",
         *         "fundraising_for_self": true,
         *         "goal": {
         *           "currency": "USD",
         *           "value": "182.32"
         *         },
         *         "id": "92e43142-296b-4544-8be8-52efbdc88825",
         *         "inserted_at": "2024-12-04T18:44:58.006296Z",
         *         "name": "My Awesome Campaign",
         *         "original_goal": {
         *           "currency": "USD",
         *           "value": "182.32"
         *         },
         *         "published_at": "2024-12-04T18:44:58.006313Z",
         *         "retired_at": null,
         *         "slug": "my-awesome-campaign",
         *         "status": "published",
         *         "supporting_type": "none",
         *         "total_amount_raised": {
         *           "currency": "USD",
         *           "value": "182.32"
         *         },
         *         "updated_at": "2024-12-04T18:44:58.006319Z",
         *         "url": "https://tiltify.com/@username/personal/my-awesome-campaign",
         *         "user": {
         *           "avatar": {
         *             "alt": "Short image description used as alternative text.",
         *             "height": 200,
         *             "src": "https://tiltify.com/images/example.jpg",
         *             "width": 200
         *           },
         *           "description": "Professional twitch streamer who likes charity!",
         *           "id": "198ec291-7fc3-41a4-b408-18b1f936e4a8",
         *           "legacy_id": 121506308,
         *           "slug": "username",
         *           "social": {
         *             "discord": "https://discord.gg/tiltify",
         *             "facebook": "tiltify",
         *             "instagram": "tiltify",
         *             "snapchat": "tiltify",
         *             "tiktok": "tilitfy",
         *             "twitch": "tilitfy",
         *             "twitter": "tiltify",
         *             "website": "https://tiltify.com",
         *             "youtube": "UCWcPgWbuWuJX5rHWm6Kb4Vw"
         *           },
         *           "total_amount_raised": {
         *             "currency": "USD",
         *             "value": "182.32"
         *           },
         *           "url": "https://tiltify.com/@username",
         *           "username": "UserName"
         *         },
         *         "user_id": "f901ea42-5b8e-454f-b669-54a7e1688823"
         *       }
         *     }
         */
        PersonalCampaignResponse: {
            data?: components["schemas"]["PersonalCampaign"];
        };
        /**
         * Event
         * @example {
         *       "amount_raised": {
         *         "currency": "USD",
         *         "value": "182.32"
         *       },
         *       "avatar": {
         *         "alt": "Short image description used as alternative text.",
         *         "height": 200,
         *         "src": "https://tiltify.com/images/example.jpg",
         *         "width": 200
         *       },
         *       "cause_id": "d1338356-10c8-4327-b93d-00170b2369c6",
         *       "description": "My Awesome weekend campaign.",
         *       "donate_url": "https://donate.tiltify.com/@username/my-awesome-campaign",
         *       "fundraising_event_id": "06e67cd8-748a-4e02-9e30-ad2e34120d49",
         *       "goal": {
         *         "currency": "USD",
         *         "value": "182.32"
         *       },
         *       "has_schedule": false,
         *       "id": "4d17a04b-88c8-46aa-80d0-2d739ddfa687",
         *       "inserted_at": "2024-12-04T18:44:57.507620Z",
         *       "legacy_id": 923436858,
         *       "livestream": {
         *         "channel": "tiltify",
         *         "type": "twitch"
         *       },
         *       "name": "My Awesome Campaign",
         *       "original_goal": {
         *         "currency": "USD",
         *         "value": "182.32"
         *       },
         *       "published_at": "2024-12-04T18:44:57.507646Z",
         *       "retired_at": null,
         *       "slug": "my-awesome-campaign",
         *       "status": "published",
         *       "supporting_type": "none",
         *       "total_amount_raised": {
         *         "currency": "USD",
         *         "value": "182.32"
         *       },
         *       "updated_at": "2024-12-04T18:44:57.507651Z",
         *       "url": "https://tiltify.com/@username/my-awesome-campaign",
         *       "user": {
         *         "avatar": {
         *           "alt": "Short image description used as alternative text.",
         *           "height": 200,
         *           "src": "https://tiltify.com/images/example.jpg",
         *           "width": 200
         *         },
         *         "description": "Professional twitch streamer who likes charity!",
         *         "id": "198ec291-7fc3-41a4-b408-18b1f936e4a8",
         *         "legacy_id": 121506308,
         *         "slug": "username",
         *         "social": {
         *           "discord": "https://discord.gg/tiltify",
         *           "facebook": "tiltify",
         *           "instagram": "tiltify",
         *           "snapchat": "tiltify",
         *           "tiktok": "tilitfy",
         *           "twitch": "tilitfy",
         *           "twitter": "tiltify",
         *           "website": "https://tiltify.com",
         *           "youtube": "UCWcPgWbuWuJX5rHWm6Kb4Vw"
         *         },
         *         "total_amount_raised": {
         *           "currency": "USD",
         *           "value": "182.32"
         *         },
         *         "url": "https://tiltify.com/@username",
         *         "username": "UserName"
         *       },
         *       "user_id": "b308b5f8-b4d5-4d70-b705-ad2df5a6557a"
         *     }
         */
        Event: components["schemas"]["Campaign"] | components["schemas"]["TeamCampaign"];
        /**
         * AuctionHouseResponse
         * @example {
         *       "data": {
         *         "amount_raised": {
         *           "currency": "USD",
         *           "value": "182.32"
         *         },
         *         "avatar": {
         *           "alt": "Short image description used as alternative text.",
         *           "height": 200,
         *           "src": "https://tiltify.com/images/example.jpg",
         *           "width": 200
         *         },
         *         "banner": {
         *           "alt": "Short image description used as alternative text.",
         *           "height": 200,
         *           "src": "https://tiltify.com/images/example.jpg",
         *           "width": 200
         *         },
         *         "campaign_id": "0723c5cb-751f-4953-bfdc-a1bb1b005570",
         *         "cause_id": "01dd91b5-a44a-421a-a872-5f6ae3599b36",
         *         "description": "My Awesome weekend auction house.",
         *         "fundraising_event_id": "a61352ab-9a74-4411-9796-426cb801c315",
         *         "id": "5a012dd6-3bbe-4c6d-a5b7-563c412f7239",
         *         "inserted_at": "2024-12-04T18:44:57.416770Z",
         *         "name": "My Awesome Auction House",
         *         "pledged_amount_raised": {
         *           "currency": "USD",
         *           "value": "182.32"
         *         },
         *         "pledged_total_amount_raised": {
         *           "currency": "USD",
         *           "value": "182.32"
         *         },
         *         "published_at": "2024-12-04T18:44:57.416786Z",
         *         "retired_at": "2024-12-04T18:44:57.416790Z",
         *         "slug": "my-awesome-auction-house",
         *         "status": "published",
         *         "team_event_id": "3057027b-620a-476a-818e-1536938c5308",
         *         "total_amount_raised": {
         *           "currency": "USD",
         *           "value": "182.32"
         *         },
         *         "updated_at": "2024-12-04T18:44:57.416797Z",
         *         "url": "https://tiltify.com/@username/auctions/my-awesome-auction-house",
         *         "user_id": "35cd3a39-d145-4dfa-9519-5a1ad3277020"
         *       }
         *     }
         */
        AuctionHouseResponse: {
            data?: components["schemas"]["AuctionHouse"];
        };
        /**
         * NotFound
         * @description Object returned when requested resource cannot be found.
         * @example {
         *       "error": {
         *         "fields": null,
         *         "message": "Not Found",
         *         "status": 404
         *       }
         *     }
         */
        NotFound: components["schemas"]["ErrorResponse"];
        /**
         * RewardClaim
         * @description A reward claim describing a reward and its quantity
         * @example {
         *       "id": "3217ef06-d773-4d84-8000-b94781be81f0",
         *       "quantity": 1,
         *       "reward_id": "520b597c-7c9c-4edc-8272-562bf3e2c359"
         *     }
         */
        RewardClaim: {
            /** @description Public ID for the reward claim */
            id?: string;
            /** @description Quantity claimed */
            quantity?: number;
            /** @description Public ID for the reward */
            reward_id?: string;
        };
        /**
         * ConfiguredLeaderboard
         * @description Configured Leaderboards Like V3
         * @example {
         *       "team": [],
         *       "user": [],
         *       "weekly": []
         *     }
         */
        ConfiguredLeaderboard: {
            individual?: components["schemas"]["LeaderboardEntry"][];
            team?: components["schemas"]["LeaderboardEntry"][];
            weekly?: components["schemas"]["LeaderboardEntry"][];
        };
        /**
         * CampaignResponse
         * @example {
         *       "data": {
         *         "amount_raised": {
         *           "currency": "USD",
         *           "value": "182.32"
         *         },
         *         "avatar": {
         *           "alt": "Short image description used as alternative text.",
         *           "height": 200,
         *           "src": "https://tiltify.com/images/example.jpg",
         *           "width": 200
         *         },
         *         "cause_id": "d1338356-10c8-4327-b93d-00170b2369c6",
         *         "description": "My Awesome weekend campaign.",
         *         "donate_url": "https://donate.tiltify.com/@username/my-awesome-campaign",
         *         "fundraising_event_id": "06e67cd8-748a-4e02-9e30-ad2e34120d49",
         *         "goal": {
         *           "currency": "USD",
         *           "value": "182.32"
         *         },
         *         "has_schedule": false,
         *         "id": "4d17a04b-88c8-46aa-80d0-2d739ddfa687",
         *         "inserted_at": "2024-12-04T18:44:57.507620Z",
         *         "legacy_id": 923436858,
         *         "livestream": {
         *           "channel": "tiltify",
         *           "type": "twitch"
         *         },
         *         "name": "My Awesome Campaign",
         *         "original_goal": {
         *           "currency": "USD",
         *           "value": "182.32"
         *         },
         *         "published_at": "2024-12-04T18:44:57.507646Z",
         *         "retired_at": null,
         *         "slug": "my-awesome-campaign",
         *         "status": "published",
         *         "supporting_type": "none",
         *         "total_amount_raised": {
         *           "currency": "USD",
         *           "value": "182.32"
         *         },
         *         "updated_at": "2024-12-04T18:44:57.507651Z",
         *         "url": "https://tiltify.com/@username/my-awesome-campaign",
         *         "user": {
         *           "avatar": {
         *             "alt": "Short image description used as alternative text.",
         *             "height": 200,
         *             "src": "https://tiltify.com/images/example.jpg",
         *             "width": 200
         *           },
         *           "description": "Professional twitch streamer who likes charity!",
         *           "id": "198ec291-7fc3-41a4-b408-18b1f936e4a8",
         *           "legacy_id": 121506308,
         *           "slug": "username",
         *           "social": {
         *             "discord": "https://discord.gg/tiltify",
         *             "facebook": "tiltify",
         *             "instagram": "tiltify",
         *             "snapchat": "tiltify",
         *             "tiktok": "tilitfy",
         *             "twitch": "tilitfy",
         *             "twitter": "tiltify",
         *             "website": "https://tiltify.com",
         *             "youtube": "UCWcPgWbuWuJX5rHWm6Kb4Vw"
         *           },
         *           "total_amount_raised": {
         *             "currency": "USD",
         *             "value": "182.32"
         *           },
         *           "url": "https://tiltify.com/@username",
         *           "username": "UserName"
         *         },
         *         "user_id": "b308b5f8-b4d5-4d70-b705-ad2df5a6557a"
         *       }
         *     }
         */
        CampaignResponse: {
            data?: components["schemas"]["Campaign"];
        };
        /**
         * CampaignPaginatedResponse
         * @example {
         *       "data": [
         *         {
         *           "amount_raised": {
         *             "currency": "USD",
         *             "value": "182.32"
         *           },
         *           "avatar": {
         *             "alt": "Short image description used as alternative text.",
         *             "height": 200,
         *             "src": "https://tiltify.com/images/example.jpg",
         *             "width": 200
         *           },
         *           "cause_id": "d1338356-10c8-4327-b93d-00170b2369c6",
         *           "description": "My Awesome weekend campaign.",
         *           "donate_url": "https://donate.tiltify.com/@username/my-awesome-campaign",
         *           "fundraising_event_id": "06e67cd8-748a-4e02-9e30-ad2e34120d49",
         *           "goal": {
         *             "currency": "USD",
         *             "value": "182.32"
         *           },
         *           "has_schedule": false,
         *           "id": "4d17a04b-88c8-46aa-80d0-2d739ddfa687",
         *           "inserted_at": "2024-12-04T18:44:57.507620Z",
         *           "legacy_id": 923436858,
         *           "livestream": {
         *             "channel": "tiltify",
         *             "type": "twitch"
         *           },
         *           "name": "My Awesome Campaign",
         *           "original_goal": {
         *             "currency": "USD",
         *             "value": "182.32"
         *           },
         *           "published_at": "2024-12-04T18:44:57.507646Z",
         *           "retired_at": null,
         *           "slug": "my-awesome-campaign",
         *           "status": "published",
         *           "supporting_type": "none",
         *           "total_amount_raised": {
         *             "currency": "USD",
         *             "value": "182.32"
         *           },
         *           "updated_at": "2024-12-04T18:44:57.507651Z",
         *           "url": "https://tiltify.com/@username/my-awesome-campaign",
         *           "user": {
         *             "avatar": {
         *               "alt": "Short image description used as alternative text.",
         *               "height": 200,
         *               "src": "https://tiltify.com/images/example.jpg",
         *               "width": 200
         *             },
         *             "description": "Professional twitch streamer who likes charity!",
         *             "id": "198ec291-7fc3-41a4-b408-18b1f936e4a8",
         *             "legacy_id": 121506308,
         *             "slug": "username",
         *             "social": {
         *               "discord": "https://discord.gg/tiltify",
         *               "facebook": "tiltify",
         *               "instagram": "tiltify",
         *               "snapchat": "tiltify",
         *               "tiktok": "tilitfy",
         *               "twitch": "tilitfy",
         *               "twitter": "tiltify",
         *               "website": "https://tiltify.com",
         *               "youtube": "UCWcPgWbuWuJX5rHWm6Kb4Vw"
         *             },
         *             "total_amount_raised": {
         *               "currency": "USD",
         *               "value": "182.32"
         *             },
         *             "url": "https://tiltify.com/@username",
         *             "username": "UserName"
         *           },
         *           "user_id": "b308b5f8-b4d5-4d70-b705-ad2df5a6557a"
         *         }
         *       ],
         *       "metadata": {
         *         "after": "bGlnaHQgwd==",
         *         "before": null,
         *         "limit": 10
         *       }
         *     }
         */
        CampaignPaginatedResponse: {
            data?: components["schemas"]["Campaign"][];
            /** @example {
             *       "after": "bGlnaHQgwd==",
             *       "before": null,
             *       "limit": 10
             *     } */
            metadata?: {
                /** @description The cursor to the next page if it exists */
                after: string | null;
                /** @description The cursor to the previous page if it exists */
                before: string | null;
                /** @description The requested record limit */
                limit: number;
            };
        } & components["schemas"]["PaginatedResponse"];
        /**
         * PublicId
         * Format: uuid
         * @description Unique Identifier for the Object. UUID
         * @example 470f5c9f-cb3e-4372-8f16-ca3aa3ac7da9
         */
        PublicId: string;
        /**
         * Role
         * @example {
         *       "id": "ebf8fcb3-f0b0-4cc6-bea3-6ffe73d6e781",
         *       "key": "team_super_admin",
         *       "name": "Team Administrator"
         *     }
         */
        Role: {
            id: components["schemas"]["PublicId"];
            /**
             * @description Internal key for the role
             * @enum {string}
             */
            key: "team_super_admin" | "team_admin" | "team_user_manager" | "team_event_manager" | "team_member";
            /** @description Visible name of the role */
            name: string;
        };
        /**
         * PaginatedResponse
         * @description Object returned for paginated API responses
         * @example {
         *       "data": [],
         *       "metadata": {
         *         "after": "bGlnaHQgwd==",
         *         "before": null,
         *         "limit": 10
         *       }
         *     }
         */
        PaginatedResponse: {
            data: Record<string, never>[];
            /** @example {
             *       "after": "bGlnaHQgwd==",
             *       "before": null,
             *       "limit": 10
             *     } */
            metadata?: {
                /** @description The cursor to the next page if it exists */
                after: string | null;
                /** @description The cursor to the previous page if it exists */
                before: string | null;
                /** @description The requested record limit */
                limit: number;
            };
        };
        /**
         * PersonalCampaign
         * @example {
         *       "amount_raised": {
         *         "currency": "USD",
         *         "value": "182.32"
         *       },
         *       "avatar": {
         *         "alt": "Short image description used as alternative text.",
         *         "height": 200,
         *         "src": "https://tiltify.com/images/example.jpg",
         *         "width": 200
         *       },
         *       "description": "My Awesome weekend campaign.",
         *       "donate_url": "https://give.tiltify.com/6f81bf48-36c0-4a5e-b0b6-d6f21b22348d",
         *       "fundraising_for_name": "ME!",
         *       "fundraising_for_self": true,
         *       "goal": {
         *         "currency": "USD",
         *         "value": "182.32"
         *       },
         *       "id": "92e43142-296b-4544-8be8-52efbdc88825",
         *       "inserted_at": "2024-12-04T18:44:58.006296Z",
         *       "name": "My Awesome Campaign",
         *       "original_goal": {
         *         "currency": "USD",
         *         "value": "182.32"
         *       },
         *       "published_at": "2024-12-04T18:44:58.006313Z",
         *       "retired_at": null,
         *       "slug": "my-awesome-campaign",
         *       "status": "published",
         *       "supporting_type": "none",
         *       "total_amount_raised": {
         *         "currency": "USD",
         *         "value": "182.32"
         *       },
         *       "updated_at": "2024-12-04T18:44:58.006319Z",
         *       "url": "https://tiltify.com/@username/personal/my-awesome-campaign",
         *       "user": {
         *         "avatar": {
         *           "alt": "Short image description used as alternative text.",
         *           "height": 200,
         *           "src": "https://tiltify.com/images/example.jpg",
         *           "width": 200
         *         },
         *         "description": "Professional twitch streamer who likes charity!",
         *         "id": "198ec291-7fc3-41a4-b408-18b1f936e4a8",
         *         "legacy_id": 121506308,
         *         "slug": "username",
         *         "social": {
         *           "discord": "https://discord.gg/tiltify",
         *           "facebook": "tiltify",
         *           "instagram": "tiltify",
         *           "snapchat": "tiltify",
         *           "tiktok": "tilitfy",
         *           "twitch": "tilitfy",
         *           "twitter": "tiltify",
         *           "website": "https://tiltify.com",
         *           "youtube": "UCWcPgWbuWuJX5rHWm6Kb4Vw"
         *         },
         *         "total_amount_raised": {
         *           "currency": "USD",
         *           "value": "182.32"
         *         },
         *         "url": "https://tiltify.com/@username",
         *         "username": "UserName"
         *       },
         *       "user_id": "f901ea42-5b8e-454f-b669-54a7e1688823"
         *     }
         */
        PersonalCampaign: {
            /** @description The amount raised directly by this campaign */
            amount_raised: components["schemas"]["Money"];
            avatar: components["schemas"]["Image"];
            /** @description A short description about this campaign */
            description: string;
            /** @description This is the donate url for the campaign. */
            donate_url: components["schemas"]["Url"];
            /** @description The name of who the personal campaign is fundraising for */
            fundraising_for_name: string | null;
            /** @description If the personal campaign is fundraising for the owner */
            fundraising_for_self: boolean;
            /** @description The current goal of the campaign */
            goal: components["schemas"]["Money"];
            id: components["schemas"]["PublicId"];
            /**
             * Format: date-time
             * @description When the campaign was created
             */
            inserted_at: string;
            /** @description The name of this campaign */
            name: string;
            /** @description The original goal of the campaign */
            original_goal: components["schemas"]["Money"];
            /**
             * Format: date-time
             * @description When the campaign was last published
             */
            published_at: string;
            /**
             * Format: date-time
             * @description When the campaign was retired
             */
            retired_at: string | null;
            slug: components["schemas"]["Slug"];
            /**
             * @description The status of this campaign
             * @enum {string}
             */
            status: "unpublished" | "published" | "retired";
            /**
             * @description The amount raised by this campaign and all supporting campaigns
             * @enum {string}
             */
            supporting_type: "none" | "public" | "private" | "invite_only";
            /** @description The amount raised by this campaign and all supporting campaigns */
            total_amount_raised: components["schemas"]["Money"];
            /**
             * Format: date-time
             * @description When the campaign details were last updated
             */
            updated_at: string;
            /** @description This is the full url for the campaign. */
            url: components["schemas"]["Url"];
            /** @description The User that owns this campaign. */
            user: components["schemas"]["User"] | null;
            /** @description The ID for a User that owns this campaign. */
            user_id: components["schemas"]["PublicId"] | null;
        };
        /**
         * LegacyId
         * @deprecated
         * @description Legacy numeric ID of the object. If your app is dependent on this field, please migrate to id. This will be deprecated in the next version of the API.
         * @example 898849666
         */
        LegacyId: number;
        /**
         * FitnessGoalPaginatedResponse
         * @example {
         *       "data": [
         *         {
         *           "current_value": "44.4",
         *           "distance_unit": "mile",
         *           "goal": "1000",
         *           "id": "f169e6b3-250f-4973-bb2c-b89cfc0961e3",
         *           "type": "Running"
         *         }
         *       ],
         *       "metadata": {
         *         "after": "bGlnaHQgwd==",
         *         "before": null,
         *         "limit": 10
         *       }
         *     }
         */
        FitnessGoalPaginatedResponse: {
            data?: components["schemas"]["FitnessGoal"][];
            /** @example {
             *       "after": "bGlnaHQgwd==",
             *       "before": null,
             *       "limit": 10
             *     } */
            metadata?: {
                /** @description The cursor to the next page if it exists */
                after: string | null;
                /** @description The cursor to the previous page if it exists */
                before: string | null;
                /** @description The requested record limit */
                limit: number;
            };
        } & components["schemas"]["PaginatedResponse"];
        /**
         * MilestonePaginatedResponse
         * @example {
         *       "data": [
         *         {
         *           "active": true,
         *           "amount": {
         *             "currency": "USD",
         *             "value": "182.32"
         *           },
         *           "id": "2cf4c15a-5036-4839-897a-ae738361a807",
         *           "inserted_at": "2024-12-04T18:44:58.006893Z",
         *           "legacy_id": 632557106,
         *           "name": "Learn a TikTok dance live!",
         *           "updated_at": "2024-12-04T18:44:58.006915Z"
         *         }
         *       ],
         *       "metadata": {
         *         "after": "bGlnaHQgwd==",
         *         "before": null,
         *         "limit": 10
         *       }
         *     }
         */
        MilestonePaginatedResponse: {
            data?: components["schemas"]["Milestone"][];
            /** @example {
             *       "after": "bGlnaHQgwd==",
             *       "before": null,
             *       "limit": 10
             *     } */
            metadata?: {
                /** @description The cursor to the next page if it exists */
                after: string | null;
                /** @description The cursor to the previous page if it exists */
                before: string | null;
                /** @description The requested record limit */
                limit: number;
            };
        } & components["schemas"]["PaginatedResponse"];
        /**
         * Milestone
         * @example {
         *       "active": true,
         *       "amount": {
         *         "currency": "USD",
         *         "value": "182.32"
         *       },
         *       "id": "2cf4c15a-5036-4839-897a-ae738361a807",
         *       "inserted_at": "2024-12-04T18:44:58.006893Z",
         *       "legacy_id": 632557106,
         *       "name": "Learn a TikTok dance live!",
         *       "updated_at": "2024-12-04T18:44:58.006915Z"
         *     }
         */
        Milestone: {
            /** @description Whether or not the milestone is active */
            active: boolean;
            /** @description The amount of the milestone. */
            amount: components["schemas"]["Money"];
            /** @description Unique Identifier for the milestone. */
            id: components["schemas"]["PublicId"];
            /**
             * Format: date-time
             * @description Moment when the milestone was created
             */
            inserted_at: string;
            legacy_id: components["schemas"]["LegacyId"];
            /** @description Milestone name */
            name: string;
            /**
             * Format: date-time
             * @description Moment when the milestone was last updated
             */
            updated_at: string;
        };
        /**
         * SchedulePaginatedResponse
         * @example {
         *       "data": [
         *         {
         *           "description": null,
         *           "ends_at": "2024-12-04T18:44:55.873902Z",
         *           "id": "22069e3f-9139-4fa3-9b08-65f68ab0a12c",
         *           "inserted_at": "2024-12-04T18:44:55.873968Z",
         *           "legacy_id": 314035670,
         *           "name": "Holiday Special Livestream",
         *           "starts_at": "2024-12-04T18:44:55.873985Z",
         *           "updated_at": "2024-12-04T18:44:55.873988Z"
         *         }
         *       ],
         *       "metadata": {
         *         "after": "bGlnaHQgwd==",
         *         "before": null,
         *         "limit": 10
         *       }
         *     }
         */
        SchedulePaginatedResponse: {
            data?: components["schemas"]["Schedule"][];
            /** @example {
             *       "after": "bGlnaHQgwd==",
             *       "before": null,
             *       "limit": 10
             *     } */
            metadata?: {
                /** @description The cursor to the next page if it exists */
                after: string | null;
                /** @description The cursor to the previous page if it exists */
                before: string | null;
                /** @description The requested record limit */
                limit: number;
            };
        } & components["schemas"]["PaginatedResponse"];
        /**
         * Cause
         * @example {
         *       "avatar": {
         *         "alt": "Short image description used as alternative text.",
         *         "height": 200,
         *         "src": "https://tiltify.com/images/example.jpg",
         *         "width": 200
         *       },
         *       "contact": {
         *         "address_line1": "22251 Bahringer Turnpike",
         *         "address_line2": null,
         *         "city": "Bright Tree Village",
         *         "country": "Outer Rim",
         *         "email": "contact@erf.test",
         *         "postal_code": "20001",
         *         "region": "Endor"
         *       },
         *       "currency_code": "USD",
         *       "description": "Ewok Rescue Foundation (ERF) works around the forest moon of Endor to promote the most effective Ewok protection. Join us and help us to build a better Endor!",
         *       "government_id": "12-3456789",
         *       "id": "2d08932c-82ad-4d64-bbf9-09e4ec39ed1d",
         *       "inserted_at": "2024-12-04T18:44:57.096364Z",
         *       "legacy_id": 575676436,
         *       "name": "Ewok Rescue Foundation",
         *       "short_description": "ERF works in Endor to protect the Ewoks",
         *       "slug": "ewok-rescue-foundation",
         *       "social": {
         *         "discord": "https://discord.gg/tiltify",
         *         "facebook": "tiltify",
         *         "instagram": "tiltify",
         *         "snapchat": "tiltify",
         *         "tiktok": "tilitfy",
         *         "twitch": "tilitfy",
         *         "twitter": "tiltify",
         *         "website": "https://tiltify.com",
         *         "youtube": "UCWcPgWbuWuJX5rHWm6Kb4Vw"
         *       },
         *       "updated_at": "2024-12-04T18:44:57.096391Z"
         *     }
         */
        Cause: {
            avatar: components["schemas"]["Image"];
            contact: {
                /** @description The first line of the contact address */
                address_line1?: string | null;
                /** @description The second line of the contact address */
                address_line2?: string | null;
                /** @description The city of the contact address */
                city?: string | null;
                /** @description The country of the contact address */
                country?: string | null;
                /** @description An email address used for fundraiser contact. */
                email?: string | null;
                /** @description The postal code of the contact address */
                postal_code?: string | null;
                /** @description The region of the contact address */
                region?: string | null;
            };
            /** @description The currency code used by this cause. */
            currency_code: components["schemas"]["CurrencyCode"];
            /** @description A description about this cause */
            description: string;
            /** @description The government id of this cause. */
            government_id: string;
            id: components["schemas"]["PublicId"];
            /**
             * Format: date-time
             * @description When the cause was created
             */
            inserted_at: string;
            legacy_id: components["schemas"]["LegacyId"];
            /** @description The cause name */
            name: string;
            /** @description A short description about this cause */
            short_description: string | null;
            slug: components["schemas"]["Slug"];
            social: components["schemas"]["Social"];
            /**
             * Format: date-time
             * @description When the cause details were last updated
             */
            updated_at: string;
        };
        /**
         * TargetPaginatedResponse
         * @example {
         *       "data": [
         *         {
         *           "active": true,
         *           "amount": {
         *             "currency": "USD",
         *             "value": "182.32"
         *           },
         *           "amount_raised": {
         *             "currency": "USD",
         *             "value": "182.32"
         *           },
         *           "ends_at": "2024-12-04T18:44:58.188260Z",
         *           "id": "4c433a54-eea8-4640-9fa7-9e5725264d84",
         *           "inserted_at": "2024-12-04T18:44:58.188296Z",
         *           "legacy_id": 247235058,
         *           "name": "Learn a TikTok dance live!",
         *           "updated_at": "2024-12-04T18:44:58.188313Z"
         *         }
         *       ],
         *       "metadata": {
         *         "after": "bGlnaHQgwd==",
         *         "before": null,
         *         "limit": 10
         *       }
         *     }
         */
        TargetPaginatedResponse: {
            data?: components["schemas"]["Target"][];
            /** @example {
             *       "after": "bGlnaHQgwd==",
             *       "before": null,
             *       "limit": 10
             *     } */
            metadata?: {
                /** @description The cursor to the next page if it exists */
                after: string | null;
                /** @description The cursor to the previous page if it exists */
                before: string | null;
                /** @description The requested record limit */
                limit: number;
            };
        } & components["schemas"]["PaginatedResponse"];
        /**
         * Schedule
         * @example {
         *       "description": null,
         *       "ends_at": "2024-12-04T18:44:55.873902Z",
         *       "id": "22069e3f-9139-4fa3-9b08-65f68ab0a12c",
         *       "inserted_at": "2024-12-04T18:44:55.873968Z",
         *       "legacy_id": 314035670,
         *       "name": "Holiday Special Livestream",
         *       "starts_at": "2024-12-04T18:44:55.873985Z",
         *       "updated_at": "2024-12-04T18:44:55.873988Z"
         *     }
         */
        Schedule: {
            /** @description Campaign schedule description */
            description: string | null;
            /**
             * Format: date-time
             * @description Moment when the schedule ends in ISO8601 format
             */
            ends_at: string | null;
            /** @description Unique Identifier for the milestone. */
            id: components["schemas"]["PublicId"];
            /**
             * Format: date-time
             * @description Moment when the milestone was created
             */
            inserted_at: string;
            legacy_id: components["schemas"]["LegacyId"];
            /** @description Milestone name */
            name: string;
            /**
             * Format: date-time
             * @description Moment when the schedule starts in ISO8601 format
             */
            starts_at: string;
            /**
             * Format: date-time
             * @description Moment when the milestone was last updated
             */
            updated_at: string;
        };
        /**
         * NullableUserResponse
         * @example {
         *       "data": {
         *         "avatar": {
         *           "alt": "Short image description used as alternative text.",
         *           "height": 200,
         *           "src": "https://tiltify.com/images/example.jpg",
         *           "width": 200
         *         },
         *         "description": "Professional twitch streamer who likes charity!",
         *         "id": "198ec291-7fc3-41a4-b408-18b1f936e4a8",
         *         "legacy_id": 121506308,
         *         "slug": "username",
         *         "social": {
         *           "discord": "https://discord.gg/tiltify",
         *           "facebook": "tiltify",
         *           "instagram": "tiltify",
         *           "snapchat": "tiltify",
         *           "tiktok": "tilitfy",
         *           "twitch": "tilitfy",
         *           "twitter": "tiltify",
         *           "website": "https://tiltify.com",
         *           "youtube": "UCWcPgWbuWuJX5rHWm6Kb4Vw"
         *         },
         *         "total_amount_raised": {
         *           "currency": "USD",
         *           "value": "182.32"
         *         },
         *         "url": "https://tiltify.com/@username",
         *         "username": "UserName"
         *       }
         *     }
         */
        NullableUserResponse: {
            data?: components["schemas"]["User"] | null;
        };
        /**
         * Money
         * @description Schema defining monetary amount in given currency
         * @example {
         *       "currency": "USD",
         *       "value": "182.32"
         *     }
         */
        Money: {
            currency: components["schemas"]["CurrencyCode"];
            /** @description Monetary amount */
            value: string;
        } | null;
        /**
         * Slug
         * Format: ~r/^[a-z|A-Z|-]+$/
         * @description This is a url slug used for the given resource.
         * @example example-slug
         */
        Slug: string;
        /**
         * TeamCampaign
         * @example {
         *       "amount_raised": {
         *         "currency": "USD",
         *         "value": "182.32"
         *       },
         *       "avatar": {
         *         "alt": "Short image description used as alternative text.",
         *         "height": 200,
         *         "src": "https://tiltify.com/images/example.jpg",
         *         "width": 200
         *       },
         *       "currency_code": "USD",
         *       "description": "Let's fundraise togehter",
         *       "donate_url": "https://donate.tiltify.com/+team-slug/our-awesome-team-campaign",
         *       "goal": {
         *         "currency": "USD",
         *         "value": "182.32"
         *       },
         *       "has_schedule": false,
         *       "id": "a5c01bbf-3a1f-4b11-b66d-ef2dd82e02cf",
         *       "inserted_at": "2024-12-04T18:44:58.228470Z",
         *       "legacy_id": 122017552,
         *       "livestream": {
         *         "channel": "tiltify",
         *         "type": "twitch"
         *       },
         *       "name": "Our Awesome Team Campaign",
         *       "original_goal": {
         *         "currency": "USD",
         *         "value": "182.32"
         *       },
         *       "published_at": "2024-12-04T18:44:58.228496Z",
         *       "retired_at": null,
         *       "slug": "our-awesome-team-campaign",
         *       "status": "published",
         *       "supportable": "none",
         *       "supporting_amount_raised": {
         *         "currency": "USD",
         *         "value": "182.32"
         *       },
         *       "team": {
         *         "avatar": {
         *           "alt": "Short image description used as alternative text.",
         *           "height": 200,
         *           "src": "https://tiltify.com/images/example.jpg",
         *           "width": 200
         *         },
         *         "description": "Awesome group of friends fundraising for charity together.",
         *         "id": "1384e7cb-929c-4416-b897-8240be75c640",
         *         "legacy_id": 384857859,
         *         "name": "Awesome Team",
         *         "slug": "awesome-team",
         *         "social": {
         *           "discord": "https://discord.gg/tiltify",
         *           "facebook": "tiltify",
         *           "instagram": "tiltify",
         *           "snapchat": "tiltify",
         *           "tiktok": "tilitfy",
         *           "twitch": "tilitfy",
         *           "twitter": "tiltify",
         *           "website": "https://tiltify.com",
         *           "youtube": "UCWcPgWbuWuJX5rHWm6Kb4Vw"
         *         },
         *         "total_amount_raised": {
         *           "currency": "USD",
         *           "value": "182.32"
         *         },
         *         "url": "https://tiltify.com/+awesome-team"
         *       },
         *       "team_id": "625397c8-c59d-405b-b413-82fa51f513ff",
         *       "total_amount_raised": {
         *         "currency": "USD",
         *         "value": "182.32"
         *       },
         *       "updated_at": "2024-12-04T18:44:58.228505Z",
         *       "url": "https://tiltify.com/+team-slug/our-awesome-team-campaign"
         *     }
         */
        TeamCampaign: {
            /** @description The amount raised directly by this team campaign */
            amount_raised: components["schemas"]["Money"];
            avatar: components["schemas"]["Image"];
            /** @description The currency code used by this team campaign. */
            currency_code: components["schemas"]["CurrencyCode"];
            /** @description A short description about this team campaign */
            description: string | null;
            /** @description This is the donate url for the team campaign. */
            donate_url: components["schemas"]["Url"];
            /** @description The current goal of the team campaign */
            goal: components["schemas"]["Money"] | null;
            /** @description Whether or not this campaign has schedule items */
            has_schedule: boolean;
            id: components["schemas"]["PublicId"];
            /**
             * Format: date-time
             * @description When the team campaign was created
             */
            inserted_at: string;
            legacy_id: components["schemas"]["LegacyId"];
            /** @description The livestream information for this campaign */
            livestream: {
                /** @description The channel name for the livestream */
                channel?: string | null;
                /** @description The type of livestream */
                type?: string | null;
            } | null;
            /** @description The name of this team campaign */
            name: string;
            /** @description The original goal of the campaign */
            original_goal: components["schemas"]["Money"];
            /**
             * Format: date-time
             * @description When the team campaign was last published
             */
            published_at: string;
            /**
             * Format: date-time
             * @description When the team campaign was retired
             */
            retired_at: string | null;
            slug: components["schemas"]["Slug"];
            /**
             * @description The status of this campaign
             * @enum {string}
             */
            status: "unpublished" | "published" | "retired";
            /**
             * @description The amount raised by this campaign and all supporting campaigns
             * @enum {string}
             */
            supportable: "none" | "public" | "private" | "invite_only";
            /** @description The amount raised by any supporting campaigns */
            supporting_amount_raised: components["schemas"]["Money"];
            /** @description The Team that owns this campaign. */
            team: components["schemas"]["Team"] | null;
            /** @description The ID for a Team that owns this campaign. */
            team_id: components["schemas"]["PublicId"] | null;
            /** @description The amount raised by this team campaign and all supporting campaigns */
            total_amount_raised: components["schemas"]["Money"];
            /**
             * Format: date-time
             * @description When the team campaign details were last updated
             */
            updated_at: string;
            /** @description This is the full url for the team campaign. */
            url: components["schemas"]["Url"];
        };
        /**
         * DonationMatch
         * @example {
         *       "active": true,
         *       "amount": {
         *         "currency": "USD",
         *         "value": "182.32"
         *       },
         *       "completed_at": "2024-12-04T18:44:57.665954Z",
         *       "donation_id": "0a88b8d3-d2e3-45ba-bc26-69c2e4e0082d",
         *       "ends_at": "2024-12-04T18:44:57.665949Z",
         *       "id": "0cf63379-a867-4065-96d6-9c6d9d35168f",
         *       "inserted_at": "2024-12-04T18:44:57.665931Z",
         *       "matched_by": "Big Donor 1",
         *       "pledged_amount": {
         *         "currency": "USD",
         *         "value": "182.32"
         *       },
         *       "started_at_amount": {
         *         "currency": "USD",
         *         "value": "182.32"
         *       },
         *       "starts_at": "2024-12-04T18:44:57.665945Z",
         *       "total_amount_raised": {
         *         "currency": "USD",
         *         "value": "182.32"
         *       },
         *       "updated_at": "2024-12-04T18:44:57.665941Z"
         *     }
         */
        DonationMatch: {
            /** @description Whether or not the donation match is active */
            active: boolean;
            /** @description The amount of the donation match. */
            amount: components["schemas"]["Money"];
            /**
             * Format: date-time
             * @description Moment when the donation match completed
             */
            completed_at: string | null;
            /** @description Unique Identifier for the donation matches donation. */
            donation_id: components["schemas"]["PublicId"] | null;
            /**
             * Format: date-time
             * @description Moment when the donation match ends
             */
            ends_at: string;
            /** @description Unique Identifier for the donation match. */
            id: components["schemas"]["PublicId"];
            /**
             * Format: date-time
             * @description Moment when the donation match was created
             */
            inserted_at: string;
            /** @description The type of the match, either 'all' or 'amount' */
            match_type?: string;
            /** @description The name of the person who started the donation match */
            matched_by: string;
            /** @description The amount the donation match has pledged. */
            pledged_amount: components["schemas"]["Money"];
            /** @description The amount raised the campaign had when the donation match was started. */
            started_at_amount: components["schemas"]["Money"];
            /**
             * Format: date-time
             * @description Moment when the donation match starts
             */
            starts_at: string;
            /** @description The amount the donation match has raised. */
            total_amount_raised: components["schemas"]["Money"];
            /**
             * Format: date-time
             * @description Moment when the donation match was last updated
             */
            updated_at: string;
        };
        /**
         * AuctionItem
         * @example {
         *       "activated_at": "2024-12-04T18:44:56.213944Z",
         *       "completed_at": "2024-12-04T18:44:56.213962Z",
         *       "description": "My Awesome weekend auction item.",
         *       "ends_at": "2024-12-04T18:44:56.213967Z",
         *       "fair_market_value": {
         *         "currency": "USD",
         *         "value": "182.32"
         *       },
         *       "id": "f3ba4bb9-b53e-4c84-a300-3514a0e4d796",
         *       "images": [
         *         {
         *           "alt": "Short image description used as alternative text.",
         *           "height": 200,
         *           "src": "https://tiltify.com/images/example.jpg",
         *           "width": 200
         *         }
         *       ],
         *       "inserted_at": "2024-12-04T18:44:57.507990Z",
         *       "legal": "This is a legal disclaimer.",
         *       "name": "My Awesome Auction Item",
         *       "rules": "To bid you must be in the USA.",
         *       "short_description": "short auction item.",
         *       "starting_bid": {
         *         "currency": "USD",
         *         "value": "182.32"
         *       },
         *       "starts_at": "2024-12-04T18:44:57.508000Z",
         *       "status": "active"
         *     }
         */
        AuctionItem: {
            /**
             * Format: date-time
             * @description When the auction item was activated
             */
            activated_at: string | null;
            /**
             * Format: date-time
             * @description When the auction item was completed
             */
            completed_at: string | null;
            /** @description The description of this auction item */
            description: string;
            /**
             * Format: date-time
             * @description When the auction item ends
             */
            ends_at: string;
            /** @description The amount of the auction item if it was sold */
            fair_market_value: components["schemas"]["Money"] | null;
            id: components["schemas"]["PublicId"];
            /** @description Images for this auction item */
            images: components["schemas"]["Image"][];
            /**
             * Format: date-time
             * @description When the auction item was created
             */
            inserted_at: string | null;
            /** @description The legal information of this auction item */
            legal: string | null;
            /** @description The name of this auction item */
            name: string;
            /** @description The rules of this auction item */
            rules: string | null;
            /** @description The short description of this auction item */
            short_description: string | null;
            /** @description The starting bid amount for this auction item */
            starting_bid: components["schemas"]["Money"];
            /**
             * Format: date-time
             * @description When the auction item starts
             */
            starts_at: string;
            /**
             * @description The status of this auction item
             * @enum {string}
             */
            status: "active" | "completed" | "inactive";
        };
        /**
         * LegacyRelay
         * @deprecated
         * @example {
         *       "amount": "20.20",
         *       "anonymous": false,
         *       "currency": "USD",
         *       "donor_comment": "Keep up the good work!",
         *       "donor_name": "us3rn4m3",
         *       "meta": {
         *         "foo": "bar",
         *         "yourtoken": "can be anything"
         *       },
         *       "payment_status": "completed",
         *       "uuid": "5dfc96ef-bf2e-41ad-817c-c245b1045125"
         *     }
         */
        LegacyRelay: {
            /** @description Monetary amount */
            amount?: string;
            /** @description Wether the donation is anonymous or not */
            anonymous?: boolean;
            /** @description Monetary amount */
            currency_code?: string;
            /** @description The donors Comment */
            donor_comment?: string;
            /** @description The donors name */
            donor_name?: string;
            /** @description The providers metadata */
            meta?: string | Record<string, never>;
            /** @description The status of the donation */
            payment_status?: string;
            /** @description The providers UUID */
            uuid?: string;
        };
        /**
         * AuctionBidPaginatedResponse
         * @example {
         *       "data": [
         *         {
         *           "amount": {
         *             "currency": "USD",
         *             "value": "182.32"
         *           },
         *           "auction_house_id": "406abed8-a138-4ca3-94a3-e8aaca72eeb2",
         *           "auction_item_id": "355c5005-94c7-48b3-9ec5-9acf78bb2607",
         *           "current_winner": false,
         *           "id": "1062fb0c-8fd0-4990-ba72-c3ba06f1ec81",
         *           "inserted_at": "2024-12-04T18:44:57.430361Z",
         *           "public_name": "John Doe",
         *           "removed_at": "2024-12-04T18:44:57.430377Z",
         *           "updated_at": "2024-12-04T18:44:57.430373Z"
         *         }
         *       ],
         *       "metadata": {
         *         "after": "bGlnaHQgwd==",
         *         "before": null,
         *         "limit": 10
         *       }
         *     }
         */
        AuctionBidPaginatedResponse: {
            data?: components["schemas"]["AuctionBid"][];
            /** @example {
             *       "after": "bGlnaHQgwd==",
             *       "before": null,
             *       "limit": 10
             *     } */
            metadata?: {
                /** @description The cursor to the next page if it exists */
                after: string | null;
                /** @description The cursor to the previous page if it exists */
                before: string | null;
                /** @description The requested record limit */
                limit: number;
            };
        } & components["schemas"]["PaginatedResponse"];
        /**
         * Contribution
         * @example {
         *       "amount": {
         *         "currency": "USD",
         *         "value": "182.32"
         *       },
         *       "completed_at": "2024-12-04T18:44:57.593540Z",
         *       "donor_comment": "Keep up the great work!",
         *       "donor_name": "Test Name",
         *       "gift_matches": [],
         *       "id": "e3dd707f-d279-4616-8406-dad6c65da792",
         *       "is_match": false,
         *       "personal_campaign_id": "1a82b4ab-2a6d-46da-8d7a-705db75762f6",
         *       "poll_id": "d1ea4e1c-172a-441c-8f43-532c03d8bf2c",
         *       "poll_option_id": "dbff8934-8fa2-45fa-bdfe-1af3d92ee38f",
         *       "reward_claims": [
         *         {
         *           "id": "8104e4c6-7477-4a69-bad1-227b36e48cac",
         *           "quantity": 1,
         *           "reward_id": "42ac9d62-d486-4b18-8c7a-c47f96991666"
         *         }
         *       ],
         *       "target_id": "f204ce26-e0ca-4156-aed8-16dab461991d"
         *     }
         */
        Contribution: {
            /** @description The amount donated. */
            amount: components["schemas"]["Money"];
            /**
             * Format: date-time
             * @description Timestamp of when the contribution was completed.
             */
            completed_at: string | null;
            /** @description Note left by donor */
            donor_comment: string | null;
            /** @description Publically visible donor name. This may be set to 'Anonymous' if the contribution was anonymous or moderated. */
            donor_name: string;
            /** @description The list of matches consumed by this contribution */
            gift_matches: components["schemas"]["GiftMatch"][];
            /** @description Unique Identifier for the contribution. */
            id: components["schemas"]["PublicId"];
            /** @description Whether or not the contribution is the result of a GiftMatch */
            is_match: boolean;
            /** @description ID of the campaign donated to */
            personal_campaign_id: components["schemas"]["PublicId"] | null;
            /** @description The ID for a Poll, if one was donated toward. */
            poll_id: components["schemas"]["PublicId"] | null;
            /** @description The ID for a PollOption, if one was donated toward. */
            poll_option_id: components["schemas"]["PublicId"] | null;
            reward_claims: components["schemas"]["RewardClaim"][] | null;
            /** @description The ID for a Target, if one was donated toward. */
            target_id: components["schemas"]["PublicId"] | null;
        };
        /**
         * AuctionItemResponse
         * @example {
         *       "data": {
         *         "activated_at": "2024-12-04T18:44:56.213944Z",
         *         "completed_at": "2024-12-04T18:44:56.213962Z",
         *         "description": "My Awesome weekend auction item.",
         *         "ends_at": "2024-12-04T18:44:56.213967Z",
         *         "fair_market_value": {
         *           "currency": "USD",
         *           "value": "182.32"
         *         },
         *         "id": "f3ba4bb9-b53e-4c84-a300-3514a0e4d796",
         *         "images": [
         *           {
         *             "alt": "Short image description used as alternative text.",
         *             "height": 200,
         *             "src": "https://tiltify.com/images/example.jpg",
         *             "width": 200
         *           }
         *         ],
         *         "inserted_at": "2024-12-04T18:44:57.507990Z",
         *         "legal": "This is a legal disclaimer.",
         *         "name": "My Awesome Auction Item",
         *         "rules": "To bid you must be in the USA.",
         *         "short_description": "short auction item.",
         *         "starting_bid": {
         *           "currency": "USD",
         *           "value": "182.32"
         *         },
         *         "starts_at": "2024-12-04T18:44:57.508000Z",
         *         "status": "active"
         *       }
         *     }
         */
        AuctionItemResponse: {
            data?: components["schemas"]["AuctionItem"];
        };
        /**
         * PollResponse
         * @example {
         *       "data": {
         *         "active": true,
         *         "amount_raised": {
         *           "currency": "USD",
         *           "value": "182.32"
         *         },
         *         "id": "0eefb836-f0f5-4fc8-aa10-b173b3ad02e3",
         *         "inserted_at": "2024-12-04T18:44:58.078619Z",
         *         "legacy_id": 206514673,
         *         "name": "Learn a TikTok dance live!",
         *         "options": [
         *           {
         *             "amount_raised": {
         *               "currency": "USD",
         *               "value": "182.32"
         *             },
         *             "id": "d7dff5b5-d924-47cb-93c5-5976d0b23850",
         *             "inserted_at": "2024-12-04T18:44:58.079363Z",
         *             "legacy_id": 113780794,
         *             "name": "Learn a TikTok dance live!",
         *             "updated_at": "2024-12-04T18:44:58.079377Z"
         *           },
         *           {
         *             "amount_raised": {
         *               "currency": "USD",
         *               "value": "182.32"
         *             },
         *             "id": "d7dff5b5-d924-47cb-93c5-5976d0b23850",
         *             "inserted_at": "2024-12-04T18:44:58.079363Z",
         *             "legacy_id": 113780794,
         *             "name": "Learn a TikTok dance live!",
         *             "updated_at": "2024-12-04T18:44:58.079377Z"
         *           },
         *           {
         *             "amount_raised": {
         *               "currency": "USD",
         *               "value": "182.32"
         *             },
         *             "id": "d7dff5b5-d924-47cb-93c5-5976d0b23850",
         *             "inserted_at": "2024-12-04T18:44:58.079363Z",
         *             "legacy_id": 113780794,
         *             "name": "Learn a TikTok dance live!",
         *             "updated_at": "2024-12-04T18:44:58.079377Z"
         *           }
         *         ],
         *         "updated_at": "2024-12-04T18:44:58.155032Z"
         *       }
         *     }
         */
        PollResponse: {
            data?: components["schemas"]["Poll"];
        };
        /**
         * PersonalCampaignPaginatedResponse
         * @example {
         *       "data": [
         *         {
         *           "amount_raised": {
         *             "currency": "USD",
         *             "value": "182.32"
         *           },
         *           "avatar": {
         *             "alt": "Short image description used as alternative text.",
         *             "height": 200,
         *             "src": "https://tiltify.com/images/example.jpg",
         *             "width": 200
         *           },
         *           "description": "My Awesome weekend campaign.",
         *           "donate_url": "https://give.tiltify.com/6f81bf48-36c0-4a5e-b0b6-d6f21b22348d",
         *           "fundraising_for_name": "ME!",
         *           "fundraising_for_self": true,
         *           "goal": {
         *             "currency": "USD",
         *             "value": "182.32"
         *           },
         *           "id": "92e43142-296b-4544-8be8-52efbdc88825",
         *           "inserted_at": "2024-12-04T18:44:58.006296Z",
         *           "name": "My Awesome Campaign",
         *           "original_goal": {
         *             "currency": "USD",
         *             "value": "182.32"
         *           },
         *           "published_at": "2024-12-04T18:44:58.006313Z",
         *           "retired_at": null,
         *           "slug": "my-awesome-campaign",
         *           "status": "published",
         *           "supporting_type": "none",
         *           "total_amount_raised": {
         *             "currency": "USD",
         *             "value": "182.32"
         *           },
         *           "updated_at": "2024-12-04T18:44:58.006319Z",
         *           "url": "https://tiltify.com/@username/personal/my-awesome-campaign",
         *           "user": {
         *             "avatar": {
         *               "alt": "Short image description used as alternative text.",
         *               "height": 200,
         *               "src": "https://tiltify.com/images/example.jpg",
         *               "width": 200
         *             },
         *             "description": "Professional twitch streamer who likes charity!",
         *             "id": "198ec291-7fc3-41a4-b408-18b1f936e4a8",
         *             "legacy_id": 121506308,
         *             "slug": "username",
         *             "social": {
         *               "discord": "https://discord.gg/tiltify",
         *               "facebook": "tiltify",
         *               "instagram": "tiltify",
         *               "snapchat": "tiltify",
         *               "tiktok": "tilitfy",
         *               "twitch": "tilitfy",
         *               "twitter": "tiltify",
         *               "website": "https://tiltify.com",
         *               "youtube": "UCWcPgWbuWuJX5rHWm6Kb4Vw"
         *             },
         *             "total_amount_raised": {
         *               "currency": "USD",
         *               "value": "182.32"
         *             },
         *             "url": "https://tiltify.com/@username",
         *             "username": "UserName"
         *           },
         *           "user_id": "f901ea42-5b8e-454f-b669-54a7e1688823"
         *         }
         *       ],
         *       "metadata": {
         *         "after": "bGlnaHQgwd==",
         *         "before": null,
         *         "limit": 10
         *       }
         *     }
         */
        PersonalCampaignPaginatedResponse: {
            data?: components["schemas"]["PersonalCampaign"][];
            /** @example {
             *       "after": "bGlnaHQgwd==",
             *       "before": null,
             *       "limit": 10
             *     } */
            metadata?: {
                /** @description The cursor to the next page if it exists */
                after: string | null;
                /** @description The cursor to the previous page if it exists */
                before: string | null;
                /** @description The requested record limit */
                limit: number;
            };
        } & components["schemas"]["PaginatedResponse"];
        /**
         * TeamCampaignResponse
         * @example {
         *       "data": {
         *         "amount_raised": {
         *           "currency": "USD",
         *           "value": "182.32"
         *         },
         *         "avatar": {
         *           "alt": "Short image description used as alternative text.",
         *           "height": 200,
         *           "src": "https://tiltify.com/images/example.jpg",
         *           "width": 200
         *         },
         *         "currency_code": "USD",
         *         "description": "Let's fundraise togehter",
         *         "donate_url": "https://donate.tiltify.com/+team-slug/our-awesome-team-campaign",
         *         "goal": {
         *           "currency": "USD",
         *           "value": "182.32"
         *         },
         *         "has_schedule": false,
         *         "id": "a5c01bbf-3a1f-4b11-b66d-ef2dd82e02cf",
         *         "inserted_at": "2024-12-04T18:44:58.228470Z",
         *         "legacy_id": 122017552,
         *         "livestream": {
         *           "channel": "tiltify",
         *           "type": "twitch"
         *         },
         *         "name": "Our Awesome Team Campaign",
         *         "original_goal": {
         *           "currency": "USD",
         *           "value": "182.32"
         *         },
         *         "published_at": "2024-12-04T18:44:58.228496Z",
         *         "retired_at": null,
         *         "slug": "our-awesome-team-campaign",
         *         "status": "published",
         *         "supportable": "none",
         *         "supporting_amount_raised": {
         *           "currency": "USD",
         *           "value": "182.32"
         *         },
         *         "team": {
         *           "avatar": {
         *             "alt": "Short image description used as alternative text.",
         *             "height": 200,
         *             "src": "https://tiltify.com/images/example.jpg",
         *             "width": 200
         *           },
         *           "description": "Awesome group of friends fundraising for charity together.",
         *           "id": "1384e7cb-929c-4416-b897-8240be75c640",
         *           "legacy_id": 384857859,
         *           "name": "Awesome Team",
         *           "slug": "awesome-team",
         *           "social": {
         *             "discord": "https://discord.gg/tiltify",
         *             "facebook": "tiltify",
         *             "instagram": "tiltify",
         *             "snapchat": "tiltify",
         *             "tiktok": "tilitfy",
         *             "twitch": "tilitfy",
         *             "twitter": "tiltify",
         *             "website": "https://tiltify.com",
         *             "youtube": "UCWcPgWbuWuJX5rHWm6Kb4Vw"
         *           },
         *           "total_amount_raised": {
         *             "currency": "USD",
         *             "value": "182.32"
         *           },
         *           "url": "https://tiltify.com/+awesome-team"
         *         },
         *         "team_id": "625397c8-c59d-405b-b413-82fa51f513ff",
         *         "total_amount_raised": {
         *           "currency": "USD",
         *           "value": "182.32"
         *         },
         *         "updated_at": "2024-12-04T18:44:58.228505Z",
         *         "url": "https://tiltify.com/+team-slug/our-awesome-team-campaign"
         *       }
         *     }
         */
        TeamCampaignResponse: {
            data?: components["schemas"]["TeamCampaign"];
        };
        /**
         * FundraisingEventPaginatedResponse
         * @example {
         *       "data": [
         *         {
         *           "avatar": {
         *             "alt": "Short image description used as alternative text.",
         *             "height": 200,
         *             "src": "https://tiltify.com/images/example.jpg",
         *             "width": 200
         *           },
         *           "can_publish_supporting_at": "2024-12-04T18:44:57.244988Z",
         *           "cause_id": "133a5886-9bdd-48d3-b89c-93a6ab01ecaa",
         *           "currency_code": "USD",
         *           "description": "Let's get **spooooky**!",
         *           "donate_url": "https://donate.tiltify.com/cause-slug/spooktober-2022",
         *           "end_supporting_at": "2024-12-04T18:44:57.244984Z",
         *           "ends_at": "2024-12-04",
         *           "goal": {
         *             "currency": "USD",
         *             "value": "182.32"
         *           },
         *           "id": "89ca8f41-edc2-4eda-aeaf-31a70e22119a",
         *           "inserted_at": "2024-12-04T18:44:57.244937Z",
         *           "legacy_id": 738070683,
         *           "name": "Spooktober 2022",
         *           "published_at": "2024-12-04T18:44:57.244965Z",
         *           "retired_at": null,
         *           "slug": "spooktober-2022",
         *           "start_supporting_at": "2024-12-04T18:44:57.244980Z",
         *           "starts_at": "2024-12-04",
         *           "status": "published",
         *           "total_amount_raised": {
         *             "currency": "USD",
         *             "value": "182.32"
         *           },
         *           "updated_at": "2024-12-04T18:44:57.244995Z",
         *           "url": "https://tiltify.com/cause-slug/spooktober-2022"
         *         }
         *       ],
         *       "metadata": {
         *         "after": "bGlnaHQgwd==",
         *         "before": null,
         *         "limit": 10
         *       }
         *     }
         */
        FundraisingEventPaginatedResponse: {
            data?: components["schemas"]["FundraisingEvent"][];
            /** @example {
             *       "after": "bGlnaHQgwd==",
             *       "before": null,
             *       "limit": 10
             *     } */
            metadata?: {
                /** @description The cursor to the next page if it exists */
                after: string | null;
                /** @description The cursor to the previous page if it exists */
                before: string | null;
                /** @description The requested record limit */
                limit: number;
            };
        } & components["schemas"]["PaginatedResponse"];
        /**
         * UnprocessableEntity
         * @description Object returned when requester has provided invalid parameters.
         * @example {
         *       "error": {
         *         "fields": {
         *           "campaign_id": [
         *             "invalid"
         *           ]
         *         },
         *         "message": "Unprocessible Entity",
         *         "status": 422
         *       }
         *     }
         */
        UnprocessableEntity: components["schemas"]["ErrorResponse"];
        /**
         * RewardPaginatedResponse
         * @example {
         *       "data": [
         *         {
         *           "active": true,
         *           "amount": {
         *             "currency": "USD",
         *             "value": "182.32"
         *           },
         *           "description": "The streamer will pick a song and sing it poorly",
         *           "ends_at": "2024-12-04T18:44:58.098081Z",
         *           "fair_market_value": {
         *             "currency": "USD",
         *             "value": "182.32"
         *           },
         *           "highlighted": true,
         *           "id": "1e410b0f-c307-4e26-9439-5656f7090809",
         *           "image": {
         *             "alt": "Short image description used as alternative text.",
         *             "height": 200,
         *             "src": "https://tiltify.com/images/example.jpg",
         *             "width": 200
         *           },
         *           "inserted_at": "2024-12-04T18:44:58.098121Z",
         *           "legacy_id": 25729568,
         *           "name": "Sing a Song Poorly",
         *           "quantity": 1000,
         *           "quantity_remaining": 23,
         *           "starts_at": "2024-12-04T18:44:58.098135Z",
         *           "updated_at": "2024-12-04T18:44:58.098143Z"
         *         }
         *       ],
         *       "metadata": {
         *         "after": "bGlnaHQgwd==",
         *         "before": null,
         *         "limit": 10
         *       }
         *     }
         */
        RewardPaginatedResponse: {
            data?: components["schemas"]["Reward"][];
            /** @example {
             *       "after": "bGlnaHQgwd==",
             *       "before": null,
             *       "limit": 10
             *     } */
            metadata?: {
                /** @description The cursor to the next page if it exists */
                after: string | null;
                /** @description The cursor to the previous page if it exists */
                before: string | null;
                /** @description The requested record limit */
                limit: number;
            };
        } & components["schemas"]["PaginatedResponse"];
        /**
         * ErrorResponse
         * @description Object returned in API errors
         * @example {
         *       "error": {
         *         "fields": null,
         *         "message": "Not Found",
         *         "status": 404
         *       }
         *     }
         */
        ErrorResponse: {
            error: {
                fields?: {
                    [key: string]: string[];
                } | null;
                /** @description A human readable message describing the error. */
                message: string;
                /** @description The HTTP status of the error */
                status: number;
            };
        };
        /**
         * UserResponse
         * @example {
         *       "data": {
         *         "avatar": {
         *           "alt": "Short image description used as alternative text.",
         *           "height": 200,
         *           "src": "https://tiltify.com/images/example.jpg",
         *           "width": 200
         *         },
         *         "description": "Professional twitch streamer who likes charity!",
         *         "id": "198ec291-7fc3-41a4-b408-18b1f936e4a8",
         *         "legacy_id": 121506308,
         *         "slug": "username",
         *         "social": {
         *           "discord": "https://discord.gg/tiltify",
         *           "facebook": "tiltify",
         *           "instagram": "tiltify",
         *           "snapchat": "tiltify",
         *           "tiktok": "tilitfy",
         *           "twitch": "tilitfy",
         *           "twitter": "tiltify",
         *           "website": "https://tiltify.com",
         *           "youtube": "UCWcPgWbuWuJX5rHWm6Kb4Vw"
         *         },
         *         "total_amount_raised": {
         *           "currency": "USD",
         *           "value": "182.32"
         *         },
         *         "url": "https://tiltify.com/@username",
         *         "username": "UserName"
         *       }
         *     }
         */
        UserResponse: {
            data?: components["schemas"]["User"];
        };
        /**
         * TeamPaginatedResponse
         * @example {
         *       "data": [
         *         {
         *           "avatar": {
         *             "alt": "Short image description used as alternative text.",
         *             "height": 200,
         *             "src": "https://tiltify.com/images/example.jpg",
         *             "width": 200
         *           },
         *           "description": "Awesome group of friends fundraising for charity together.",
         *           "id": "1384e7cb-929c-4416-b897-8240be75c640",
         *           "legacy_id": 384857859,
         *           "name": "Awesome Team",
         *           "slug": "awesome-team",
         *           "social": {
         *             "discord": "https://discord.gg/tiltify",
         *             "facebook": "tiltify",
         *             "instagram": "tiltify",
         *             "snapchat": "tiltify",
         *             "tiktok": "tilitfy",
         *             "twitch": "tilitfy",
         *             "twitter": "tiltify",
         *             "website": "https://tiltify.com",
         *             "youtube": "UCWcPgWbuWuJX5rHWm6Kb4Vw"
         *           },
         *           "total_amount_raised": {
         *             "currency": "USD",
         *             "value": "182.32"
         *           },
         *           "url": "https://tiltify.com/+awesome-team"
         *         }
         *       ],
         *       "metadata": {
         *         "after": "bGlnaHQgwd==",
         *         "before": null,
         *         "limit": 10
         *       }
         *     }
         */
        TeamPaginatedResponse: {
            data?: components["schemas"]["Team"][];
            /** @example {
             *       "after": "bGlnaHQgwd==",
             *       "before": null,
             *       "limit": 10
             *     } */
            metadata?: {
                /** @description The cursor to the next page if it exists */
                after: string | null;
                /** @description The cursor to the previous page if it exists */
                before: string | null;
                /** @description The requested record limit */
                limit: number;
            };
        } & components["schemas"]["PaginatedResponse"];
        /**
         * Forbidden
         * @description Object returned when requested resource is not allowed to be access, for example in the case of premium features.
         * @example {
         *       "error": {
         *         "fields": null,
         *         "message": "Forbidden",
         *         "status": 403
         *       }
         *     }
         */
        Forbidden: components["schemas"]["ErrorResponse"];
        /**
         * PollOption
         * @example {
         *       "amount_raised": {
         *         "currency": "USD",
         *         "value": "182.32"
         *       },
         *       "id": "d7dff5b5-d924-47cb-93c5-5976d0b23850",
         *       "inserted_at": "2024-12-04T18:44:58.079363Z",
         *       "legacy_id": 113780794,
         *       "name": "Learn a TikTok dance live!",
         *       "updated_at": "2024-12-04T18:44:58.079377Z"
         *     }
         */
        PollOption: {
            /** @description Amount Raised by this poll option */
            amount_raised: components["schemas"]["Money"];
            /** @description Unique Identifier for the poll option. */
            id: components["schemas"]["PublicId"];
            /**
             * Format: date-time
             * @description Moment when the poll option was created
             */
            inserted_at: string;
            legacy_id: components["schemas"]["LegacyId"];
            /** @description poll option name */
            name: string;
            /**
             * Format: date-time
             * @description Moment when the poll option was last updated
             */
            updated_at: string;
        };
        /**
         * Unauthorized
         * @description Object returned when requester is not authorized.
         * @example {
         *       "error": {
         *         "fields": null,
         *         "message": "Unauthorized",
         *         "status": 401
         *       }
         *     }
         */
        Unauthorized: components["schemas"]["ErrorResponse"];
        /**
         * Poll
         * @example {
         *       "active": true,
         *       "amount_raised": {
         *         "currency": "USD",
         *         "value": "182.32"
         *       },
         *       "id": "0eefb836-f0f5-4fc8-aa10-b173b3ad02e3",
         *       "inserted_at": "2024-12-04T18:44:58.078619Z",
         *       "legacy_id": 206514673,
         *       "name": "Learn a TikTok dance live!",
         *       "options": [
         *         {
         *           "amount_raised": {
         *             "currency": "USD",
         *             "value": "182.32"
         *           },
         *           "id": "d7dff5b5-d924-47cb-93c5-5976d0b23850",
         *           "inserted_at": "2024-12-04T18:44:58.079363Z",
         *           "legacy_id": 113780794,
         *           "name": "Learn a TikTok dance live!",
         *           "updated_at": "2024-12-04T18:44:58.079377Z"
         *         },
         *         {
         *           "amount_raised": {
         *             "currency": "USD",
         *             "value": "182.32"
         *           },
         *           "id": "d7dff5b5-d924-47cb-93c5-5976d0b23850",
         *           "inserted_at": "2024-12-04T18:44:58.079363Z",
         *           "legacy_id": 113780794,
         *           "name": "Learn a TikTok dance live!",
         *           "updated_at": "2024-12-04T18:44:58.079377Z"
         *         },
         *         {
         *           "amount_raised": {
         *             "currency": "USD",
         *             "value": "182.32"
         *           },
         *           "id": "d7dff5b5-d924-47cb-93c5-5976d0b23850",
         *           "inserted_at": "2024-12-04T18:44:58.079363Z",
         *           "legacy_id": 113780794,
         *           "name": "Learn a TikTok dance live!",
         *           "updated_at": "2024-12-04T18:44:58.079377Z"
         *         }
         *       ],
         *       "updated_at": "2024-12-04T18:44:58.155032Z"
         *     }
         */
        Poll: {
            /** @description Whether or not the poll is active */
            active: boolean | null;
            /** @description Amount Raised by this poll option */
            amount_raised: components["schemas"]["Money"];
            /** @description Unique Identifier for the poll. */
            id: components["schemas"]["PublicId"];
            /**
             * Format: date-time
             * @description Moment when the poll was created
             */
            inserted_at: string;
            legacy_id: components["schemas"]["LegacyId"];
            /** @description Poll name */
            name: string;
            options: components["schemas"]["PollOption"][];
            /**
             * Format: date-time
             * @description Moment when the poll was last updated
             */
            updated_at: string;
        };
        /**
         * FundraisingEvent
         * @example {
         *       "avatar": {
         *         "alt": "Short image description used as alternative text.",
         *         "height": 200,
         *         "src": "https://tiltify.com/images/example.jpg",
         *         "width": 200
         *       },
         *       "can_publish_supporting_at": "2024-12-04T18:44:57.244988Z",
         *       "cause_id": "133a5886-9bdd-48d3-b89c-93a6ab01ecaa",
         *       "currency_code": "USD",
         *       "description": "Let's get **spooooky**!",
         *       "donate_url": "https://donate.tiltify.com/cause-slug/spooktober-2022",
         *       "end_supporting_at": "2024-12-04T18:44:57.244984Z",
         *       "ends_at": "2024-12-04",
         *       "goal": {
         *         "currency": "USD",
         *         "value": "182.32"
         *       },
         *       "id": "89ca8f41-edc2-4eda-aeaf-31a70e22119a",
         *       "inserted_at": "2024-12-04T18:44:57.244937Z",
         *       "legacy_id": 738070683,
         *       "name": "Spooktober 2022",
         *       "published_at": "2024-12-04T18:44:57.244965Z",
         *       "retired_at": null,
         *       "slug": "spooktober-2022",
         *       "start_supporting_at": "2024-12-04T18:44:57.244980Z",
         *       "starts_at": "2024-12-04",
         *       "status": "published",
         *       "total_amount_raised": {
         *         "currency": "USD",
         *         "value": "182.32"
         *       },
         *       "updated_at": "2024-12-04T18:44:57.244995Z",
         *       "url": "https://tiltify.com/cause-slug/spooktober-2022"
         *     }
         */
        FundraisingEvent: {
            avatar: components["schemas"]["Image"];
            /** @description The datetime the campaign will allow supporting campaigns to be published in ISO 8601 format */
            can_publish_supporting_at: string | null;
            /** @description The ID for a Cause that owns this fundraising event. */
            cause_id: components["schemas"]["PublicId"];
            /** @description The currency code used by this fundraising event. */
            currency_code: components["schemas"]["CurrencyCode"];
            /** @description A short description about this fundraising event */
            description: string;
            /** @description This is the donate url for the fundraising event. */
            donate_url: components["schemas"]["Url"];
            /** @description The datetime the campaign will stop accepting registrations in ISO 8601 format */
            end_supporting_at: string | null;
            /**
             * Format: date
             * @deprecated
             * @description A date when this fundraising event ends.
             */
            ends_at: string;
            /** @description The current goal of the fundraising event */
            goal: components["schemas"]["Money"] | null;
            id: components["schemas"]["PublicId"];
            /**
             * Format: date-time
             * @description When the fundraising event was created
             */
            inserted_at: string;
            legacy_id: components["schemas"]["LegacyId"];
            /** @description The name of this fundraising event */
            name: string;
            /**
             * Format: date-time
             * @description When the fundraising event was last published
             */
            published_at: string;
            /**
             * Format: date-time
             * @description When the fundraising event was retired
             */
            retired_at: string | null;
            slug: components["schemas"]["Slug"];
            /** @description The datetime the campaign will start accepting registrations in ISO 8601 format */
            start_supporting_at: string | null;
            /**
             * Format: date
             * @deprecated
             * @description An optional date when this fundraising event starts.
             */
            starts_at: string | null;
            /**
             * @description The status of this fundraising event
             * @enum {string}
             */
            status: "unpublished" | "published" | "retired";
            /** @description The amount raised by this fundraising event and all supporting campaigns */
            total_amount_raised: components["schemas"]["Money"];
            /**
             * Format: date-time
             * @description When the fundraising event details were last updated
             */
            updated_at: string;
            /** @description This is the full url for the fundraising event. */
            url: components["schemas"]["Url"];
        };
        /**
         * Campaign
         * @example {
         *       "amount_raised": {
         *         "currency": "USD",
         *         "value": "182.32"
         *       },
         *       "avatar": {
         *         "alt": "Short image description used as alternative text.",
         *         "height": 200,
         *         "src": "https://tiltify.com/images/example.jpg",
         *         "width": 200
         *       },
         *       "cause_id": "d1338356-10c8-4327-b93d-00170b2369c6",
         *       "description": "My Awesome weekend campaign.",
         *       "donate_url": "https://donate.tiltify.com/@username/my-awesome-campaign",
         *       "fundraising_event_id": "06e67cd8-748a-4e02-9e30-ad2e34120d49",
         *       "goal": {
         *         "currency": "USD",
         *         "value": "182.32"
         *       },
         *       "has_schedule": false,
         *       "id": "4d17a04b-88c8-46aa-80d0-2d739ddfa687",
         *       "inserted_at": "2024-12-04T18:44:57.507620Z",
         *       "legacy_id": 923436858,
         *       "livestream": {
         *         "channel": "tiltify",
         *         "type": "twitch"
         *       },
         *       "name": "My Awesome Campaign",
         *       "original_goal": {
         *         "currency": "USD",
         *         "value": "182.32"
         *       },
         *       "published_at": "2024-12-04T18:44:57.507646Z",
         *       "retired_at": null,
         *       "slug": "my-awesome-campaign",
         *       "status": "published",
         *       "supporting_type": "none",
         *       "total_amount_raised": {
         *         "currency": "USD",
         *         "value": "182.32"
         *       },
         *       "updated_at": "2024-12-04T18:44:57.507651Z",
         *       "url": "https://tiltify.com/@username/my-awesome-campaign",
         *       "user": {
         *         "avatar": {
         *           "alt": "Short image description used as alternative text.",
         *           "height": 200,
         *           "src": "https://tiltify.com/images/example.jpg",
         *           "width": 200
         *         },
         *         "description": "Professional twitch streamer who likes charity!",
         *         "id": "198ec291-7fc3-41a4-b408-18b1f936e4a8",
         *         "legacy_id": 121506308,
         *         "slug": "username",
         *         "social": {
         *           "discord": "https://discord.gg/tiltify",
         *           "facebook": "tiltify",
         *           "instagram": "tiltify",
         *           "snapchat": "tiltify",
         *           "tiktok": "tilitfy",
         *           "twitch": "tilitfy",
         *           "twitter": "tiltify",
         *           "website": "https://tiltify.com",
         *           "youtube": "UCWcPgWbuWuJX5rHWm6Kb4Vw"
         *         },
         *         "total_amount_raised": {
         *           "currency": "USD",
         *           "value": "182.32"
         *         },
         *         "url": "https://tiltify.com/@username",
         *         "username": "UserName"
         *       },
         *       "user_id": "b308b5f8-b4d5-4d70-b705-ad2df5a6557a"
         *     }
         */
        Campaign: {
            /** @description The amount raised directly by this campaign */
            amount_raised: components["schemas"]["Money"];
            avatar: components["schemas"]["Image"];
            /** @description The ID for a Cause this campaign is fundraising for */
            cause_id: components["schemas"]["PublicId"];
            /** @description A short description about this campaign */
            description: string;
            /** @description This is the donate url for the campaign. */
            donate_url: components["schemas"]["Url"];
            /** @description The ID for a Fundraising Event this campaign belongs to */
            fundraising_event_id: components["schemas"]["PublicId"] | null;
            /** @description The current goal of the campaign */
            goal: components["schemas"]["Money"];
            /** @description Whether or not this campaign has schedule items */
            has_schedule: boolean;
            id: components["schemas"]["PublicId"];
            /**
             * Format: date-time
             * @description When the campaign was created
             */
            inserted_at: string;
            legacy_id: components["schemas"]["LegacyId"];
            /** @description The livestream information for this campaign */
            livestream: {
                /** @description The channel name for the livestream */
                channel?: string | null;
                /** @description The type of livestream */
                type?: string | null;
            } | null;
            /** @description The name of this campaign */
            name: string;
            /** @description The original goal of the campaign */
            original_goal: components["schemas"]["Money"];
            /**
             * Format: date-time
             * @description When the campaign was last published
             */
            published_at: string;
            /**
             * Format: date-time
             * @description When the campaign was retired
             */
            retired_at: string | null;
            slug: components["schemas"]["Slug"];
            /**
             * @description The status of this campaign
             * @enum {string}
             */
            status: "unpublished" | "published" | "retired";
            /**
             * @description The amount raised by this campaign and all supporting campaigns
             * @enum {string}
             */
            supporting_type: "none" | "public" | "private" | "invite_only";
            /** @description The amount raised by this campaign and all supporting campaigns */
            total_amount_raised: components["schemas"]["Money"];
            /**
             * Format: date-time
             * @description When the campaign details were last updated
             */
            updated_at: string;
            /** @description This is the full url for the campaign. */
            url: components["schemas"]["Url"];
            /** @description The User that owns this campaign. */
            user: components["schemas"]["User"] | null;
            /** @description The ID for a User that owns this campaign. */
            user_id: components["schemas"]["PublicId"] | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getPersonalCampaignMilestones: {
        parameters: {
            query?: {
                /**
                 * @description Returns disabled milestones. Defaults to false
                 * @example true
                 */
                include_disabled?: boolean;
                /**
                 * @description Returns only milestones that have been updated before the given moment in ISO8601 format
                 * @example 2021-11-02T14:24:55.811924Z
                 */
                created_before?: string;
                /**
                 * @description Returns only milestones that have been updated after the given moment in ISO8601 format
                 * @example 2021-11-02T14:24:55.811924Z
                 */
                created_after?: string;
                /**
                 * @description Returns only milestones that have been updated before the given moment in ISO8601 format
                 * @example 2021-11-02T14:24:55.811924Z
                 */
                updated_before?: string;
                /**
                 * @description Returns only milestones that have been updated after the given moment in ISO8601 format
                 * @example 2021-11-02T14:24:55.811924Z
                 */
                updated_after?: string;
                /** @description Returns records after the given cursor */
                after?: string;
                /** @description Returns records before the given cursor */
                before?: string;
                limit?: number;
            };
            header?: never;
            path: {
                /** @description Campaign ID */
                personal_campaign_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Milestone"][];
                        /** @example {
                         *       "after": "bGlnaHQgwd==",
                         *       "before": null,
                         *       "limit": 10
                         *     } */
                        metadata?: {
                            /** @description The cursor to the next page if it exists */
                            after: string | null;
                            /** @description The cursor to the previous page if it exists */
                            before: string | null;
                            /** @description The requested record limit */
                            limit: number;
                        };
                    } & components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    getFundraisingEventConfiguredLeaderboards: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description fundraising event id */
                fundraising_event_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["ConfiguredLeaderboard"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "appliction/json": components["schemas"]["Forbidden"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    getCampaignSchedules: {
        parameters: {
            query?: {
                /** @description Returns records after the given cursor */
                after?: string;
                /** @description Returns records before the given cursor */
                before?: string;
                limit?: number;
            };
            header?: never;
            path: {
                /** @description Campaign ID or legacy ID */
                campaign_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Schedule"][];
                        /** @example {
                         *       "after": "bGlnaHQgwd==",
                         *       "before": null,
                         *       "limit": 10
                         *     } */
                        metadata?: {
                            /** @description The cursor to the next page if it exists */
                            after: string | null;
                            /** @description The cursor to the previous page if it exists */
                            before: string | null;
                            /** @description The requested record limit */
                            limit: number;
                        };
                    } & components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    "V5ApiWeb.Public.FundraisingEventLeaderboardController.team": {
        parameters: {
            query?: {
                /**
                 * @description The time range to use in leaderboard generation
                 * @example all
                 */
                time_type?: "daily" | "weekly" | "monthly" | "yearly" | "ytd" | "all" | "custom";
                /** @description Returns records after the given cursor */
                after?: string;
                /** @description Returns records before the given cursor */
                before?: string;
                limit?: number;
            };
            header?: never;
            path: {
                /** @description Fundraising Event ID */
                fundraising_event_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["LeaderboardEntry"][];
                        /** @example {
                         *       "after": "bGlnaHQgwd==",
                         *       "before": null,
                         *       "limit": 10
                         *     } */
                        metadata?: {
                            /** @description The cursor to the next page if it exists */
                            after: string | null;
                            /** @description The cursor to the previous page if it exists */
                            before: string | null;
                            /** @description The requested record limit */
                            limit: number;
                        };
                    } & components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "appliction/json": components["schemas"]["Forbidden"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    getCampaignFitnessGoals: {
        parameters: {
            query?: {
                /** @description Returns records after the given cursor */
                after?: string;
                /** @description Returns records before the given cursor */
                before?: string;
                limit?: number;
            };
            header?: never;
            path: {
                /** @description Campaign ID or legacy ID */
                campaign_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["FitnessGoal"][];
                        /** @example {
                         *       "after": "bGlnaHQgwd==",
                         *       "before": null,
                         *       "limit": 10
                         *     } */
                        metadata?: {
                            /** @description The cursor to the next page if it exists */
                            after: string | null;
                            /** @description The cursor to the previous page if it exists */
                            before: string | null;
                            /** @description The requested record limit */
                            limit: number;
                        };
                    } & components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    "V5ApiWeb.Public.FundraisingEventLeaderboardController.user": {
        parameters: {
            query?: {
                /**
                 * @description The time range to use in leaderboard generation
                 * @example all
                 */
                time_type?: "daily" | "weekly" | "monthly" | "yearly" | "ytd" | "all" | "custom";
                /** @description Returns records after the given cursor */
                after?: string;
                /** @description Returns records before the given cursor */
                before?: string;
                limit?: number;
            };
            header?: never;
            path: {
                /** @description Fundraising Event ID */
                fundraising_event_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["LeaderboardEntry"][];
                        /** @example {
                         *       "after": "bGlnaHQgwd==",
                         *       "before": null,
                         *       "limit": 10
                         *     } */
                        metadata?: {
                            /** @description The cursor to the next page if it exists */
                            after: string | null;
                            /** @description The cursor to the previous page if it exists */
                            before: string | null;
                            /** @description The requested record limit */
                            limit: number;
                        };
                    } & components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "appliction/json": components["schemas"]["Forbidden"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    "V5ApiWeb.Public.CauseLeaderboardController.team": {
        parameters: {
            query?: {
                /**
                 * @description The time range to use in leaderboard generation
                 * @example all
                 */
                time_type?: "daily" | "weekly" | "monthly" | "yearly" | "ytd" | "all";
                /** @description Returns records after the given cursor */
                after?: string;
                /** @description Returns records before the given cursor */
                before?: string;
                limit?: number;
            };
            header?: never;
            path: {
                /** @description Cause ID */
                cause_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["LeaderboardEntry"][];
                        /** @example {
                         *       "after": "bGlnaHQgwd==",
                         *       "before": null,
                         *       "limit": 10
                         *     } */
                        metadata?: {
                            /** @description The cursor to the next page if it exists */
                            after: string | null;
                            /** @description The cursor to the previous page if it exists */
                            before: string | null;
                            /** @description The requested record limit */
                            limit: number;
                        };
                    } & components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "appliction/json": components["schemas"]["Forbidden"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    getUserCampaignsAndTeamCampaigns: {
        parameters: {
            query?: {
                /** @description Returns records after the given cursor */
                after?: string;
                /** @description Returns records before the given cursor */
                before?: string;
                limit?: number;
            };
            header?: never;
            path: {
                /** @description User ID */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Event"][];
                        /** @example {
                         *       "after": "bGlnaHQgwd==",
                         *       "before": null,
                         *       "limit": 10
                         *     } */
                        metadata?: {
                            /** @description The cursor to the next page if it exists */
                            after: string | null;
                            /** @description The cursor to the previous page if it exists */
                            before: string | null;
                            /** @description The requested record limit */
                            limit: number;
                        };
                    } & components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    getTeamCampaignTargets: {
        parameters: {
            query?: {
                /** @description Returns records after the given cursor */
                after?: string;
                /** @description Returns records before the given cursor */
                before?: string;
                limit?: number;
            };
            header?: never;
            path: {
                /** @description Team Campaign ID or legacy ID */
                team_campaign_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Target"][];
                        /** @example {
                         *       "after": "bGlnaHQgwd==",
                         *       "before": null,
                         *       "limit": 10
                         *     } */
                        metadata?: {
                            /** @description The cursor to the next page if it exists */
                            after: string | null;
                            /** @description The cursor to the previous page if it exists */
                            before: string | null;
                            /** @description The requested record limit */
                            limit: number;
                        };
                    } & components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    getTeamCampaignPolls: {
        parameters: {
            query?: {
                /** @description Returns records after the given cursor */
                after?: string;
                /** @description Returns records before the given cursor */
                before?: string;
                limit?: number;
            };
            header?: never;
            path: {
                /** @description Team Campaign ID or legacy ID */
                team_campaign_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Poll"][];
                        /** @example {
                         *       "after": "bGlnaHQgwd==",
                         *       "before": null,
                         *       "limit": 10
                         *     } */
                        metadata?: {
                            /** @description The cursor to the next page if it exists */
                            after: string | null;
                            /** @description The cursor to the previous page if it exists */
                            before: string | null;
                            /** @description The requested record limit */
                            limit: number;
                        };
                    } & components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    "V5ApiWeb.Public.FundraisingEventLeaderboardController.team_fitness_time": {
        parameters: {
            query?: {
                /**
                 * @description The time range to use in leaderboard generation
                 * @example all
                 */
                time_type?: "daily" | "weekly" | "monthly" | "yearly" | "ytd" | "all" | "custom";
                /** @description Returns records after the given cursor */
                after?: string;
                /** @description Returns records before the given cursor */
                before?: string;
                limit?: number;
            };
            header?: never;
            path: {
                /** @description Fundraising Event ID */
                fundraising_event_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["LeaderboardEntry"][];
                        /** @example {
                         *       "after": "bGlnaHQgwd==",
                         *       "before": null,
                         *       "limit": 10
                         *     } */
                        metadata?: {
                            /** @description The cursor to the next page if it exists */
                            after: string | null;
                            /** @description The cursor to the previous page if it exists */
                            before: string | null;
                            /** @description The requested record limit */
                            limit: number;
                        };
                    } & components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "appliction/json": components["schemas"]["Forbidden"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    getTeamCampaignDonations: {
        parameters: {
            query?: {
                /**
                 * @description Returns only donations that have been completed before the given moment in ISO8601 format
                 * @example 2021-11-02T14:24:55.811924Z
                 */
                completed_before?: string;
                /**
                 * @description Returns only donations that have been completed after the given moment in ISO8601 format
                 * @example 2021-11-02T14:24:55.811924Z
                 */
                completed_after?: string;
                /** @description Returns records after the given cursor */
                after?: string;
                /** @description Returns records before the given cursor */
                before?: string;
                limit?: number;
            };
            header?: never;
            path: {
                /** @description Team Campaign ID or legacy ID */
                team_campaign_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Donation"][];
                        /** @example {
                         *       "after": "bGlnaHQgwd==",
                         *       "before": null,
                         *       "limit": 10
                         *     } */
                        metadata?: {
                            /** @description The cursor to the next page if it exists */
                            after: string | null;
                            /** @description The cursor to the previous page if it exists */
                            before: string | null;
                            /** @description The requested record limit */
                            limit: number;
                        };
                    } & components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    getPersonalCampaignRewards: {
        parameters: {
            query?: {
                /** @description Returns records after the given cursor */
                after?: string;
                /** @description Returns records before the given cursor */
                before?: string;
                limit?: number;
            };
            header?: never;
            path: {
                /** @description Campaign ID */
                personal_campaign_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Reward"][];
                        /** @example {
                         *       "after": "bGlnaHQgwd==",
                         *       "before": null,
                         *       "limit": 10
                         *     } */
                        metadata?: {
                            /** @description The cursor to the next page if it exists */
                            after: string | null;
                            /** @description The cursor to the previous page if it exists */
                            before: string | null;
                            /** @description The requested record limit */
                            limit: number;
                        };
                    } & components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    "V5ApiWeb.Oauth.Token": {
        parameters: {
            query: {
                /** @description Client Id */
                client_id: string;
                /** @description Client Secret */
                client_secret: string;
                /** @description Grant Type */
                grant_type: "client_credentials" | "authorization_code" | "refresh_token";
                /** @description Authorization Code; `*required` if using `authorization_code` grant type */
                code?: string;
                /** @description Refresh Token; `*required` if using `refresh_token` grant type */
                refresh_token?: string;
                /** @description Scope */
                scope?: "public";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    "V5ApiWeb.Public.UserController.current_user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["User"] | null;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    getUserTeams: {
        parameters: {
            query?: {
                /**
                 * @description Returns only teams where a user has a specific role
                 * @example administrator
                 */
                role?: string;
                /** @description Returns records after the given cursor */
                after?: string;
                /** @description Returns records before the given cursor */
                before?: string;
                limit?: number;
            };
            header?: never;
            path: {
                /** @description User ID */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Team"][];
                        /** @example {
                         *       "after": "bGlnaHQgwd==",
                         *       "before": null,
                         *       "limit": 10
                         *     } */
                        metadata?: {
                            /** @description The cursor to the next page if it exists */
                            after: string | null;
                            /** @description The cursor to the previous page if it exists */
                            before: string | null;
                            /** @description The requested record limit */
                            limit: number;
                        };
                    } & components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    "V5ApiWeb.Public.FundraisingEventLeaderboardController.user_fitness_distance": {
        parameters: {
            query?: {
                /**
                 * @description The time range to use in leaderboard generation
                 * @example all
                 */
                time_type?: "daily" | "weekly" | "monthly" | "yearly" | "ytd" | "all" | "custom";
                /** @description Returns records after the given cursor */
                after?: string;
                /** @description Returns records before the given cursor */
                before?: string;
                limit?: number;
            };
            header?: never;
            path: {
                /** @description Fundraising Event ID */
                fundraising_event_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["LeaderboardEntry"][];
                        /** @example {
                         *       "after": "bGlnaHQgwd==",
                         *       "before": null,
                         *       "limit": 10
                         *     } */
                        metadata?: {
                            /** @description The cursor to the next page if it exists */
                            after: string | null;
                            /** @description The cursor to the previous page if it exists */
                            before: string | null;
                            /** @description The requested record limit */
                            limit: number;
                        };
                    } & components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "appliction/json": components["schemas"]["Forbidden"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    "V5ApiWeb.Public.FundraisingEventLeaderboardController.user_fitness_time": {
        parameters: {
            query?: {
                /**
                 * @description The time range to use in leaderboard generation
                 * @example all
                 */
                time_type?: "daily" | "weekly" | "monthly" | "yearly" | "ytd" | "all" | "custom";
                /** @description Returns records after the given cursor */
                after?: string;
                /** @description Returns records before the given cursor */
                before?: string;
                limit?: number;
            };
            header?: never;
            path: {
                /** @description Fundraising Event ID */
                fundraising_event_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["LeaderboardEntry"][];
                        /** @example {
                         *       "after": "bGlnaHQgwd==",
                         *       "before": null,
                         *       "limit": 10
                         *     } */
                        metadata?: {
                            /** @description The cursor to the next page if it exists */
                            after: string | null;
                            /** @description The cursor to the previous page if it exists */
                            before: string | null;
                            /** @description The requested record limit */
                            limit: number;
                        };
                    } & components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "appliction/json": components["schemas"]["Forbidden"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    "V5ApiWeb.Public.FundraisingEventLeaderboardController.donor": {
        parameters: {
            query?: {
                /**
                 * @description The time range to use in leaderboard generation
                 * @example all
                 */
                time_type?: "daily" | "weekly" | "monthly" | "yearly" | "ytd" | "all" | "custom";
                /** @description Returns records after the given cursor */
                after?: string;
                /** @description Returns records before the given cursor */
                before?: string;
                limit?: number;
            };
            header?: never;
            path: {
                /** @description Fundraising Event ID */
                fundraising_event_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["LeaderboardEntry"][];
                        /** @example {
                         *       "after": "bGlnaHQgwd==",
                         *       "before": null,
                         *       "limit": 10
                         *     } */
                        metadata?: {
                            /** @description The cursor to the next page if it exists */
                            after: string | null;
                            /** @description The cursor to the previous page if it exists */
                            before: string | null;
                            /** @description The requested record limit */
                            limit: number;
                        };
                    } & components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "appliction/json": components["schemas"]["Forbidden"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    "V5ApiWeb.Public.CampaignController.show_slug": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User Slug */
                user_slug: string;
                /** @description Campaign Slug */
                campaign_slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Campaign"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    "V5ApiWeb.Public.AuctionHouseController.show_user_slug": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User slug */
                user_slug: string;
                /** @description Auction house slug */
                auction_house_slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["AuctionHouse"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    getTeamCampaignSchedules: {
        parameters: {
            query?: {
                /** @description Returns records after the given cursor */
                after?: string;
                /** @description Returns records before the given cursor */
                before?: string;
                limit?: number;
            };
            header?: never;
            path: {
                /** @description Team Campaign ID or legacy ID */
                team_campaign_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Schedule"][];
                        /** @example {
                         *       "after": "bGlnaHQgwd==",
                         *       "before": null,
                         *       "limit": 10
                         *     } */
                        metadata?: {
                            /** @description The cursor to the next page if it exists */
                            after: string | null;
                            /** @description The cursor to the previous page if it exists */
                            before: string | null;
                            /** @description The requested record limit */
                            limit: number;
                        };
                    } & components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    getFundraisingEventSupportingEvents: {
        parameters: {
            query?: {
                /** @description Returns records after the given cursor */
                after?: string;
                /** @description Returns records before the given cursor */
                before?: string;
                limit?: number;
            };
            header?: never;
            path: {
                /** @description Fundraising event ID or legacy ID */
                fundraising_event_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Event"][];
                        /** @example {
                         *       "after": "bGlnaHQgwd==",
                         *       "before": null,
                         *       "limit": 10
                         *     } */
                        metadata?: {
                            /** @description The cursor to the next page if it exists */
                            after: string | null;
                            /** @description The cursor to the previous page if it exists */
                            before: string | null;
                            /** @description The requested record limit */
                            limit: number;
                        };
                    } & components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    getPersonalCampaignPollbyId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Poll ID */
                poll_id: string;
                /** @description Campaign ID */
                personal_campaign_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Poll"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    getCampaignPolls: {
        parameters: {
            query?: {
                /** @description Returns records after the given cursor */
                after?: string;
                /** @description Returns records before the given cursor */
                before?: string;
                limit?: number;
            };
            header?: never;
            path: {
                /** @description Campaign ID or legacy ID */
                campaign_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Poll"][];
                        /** @example {
                         *       "after": "bGlnaHQgwd==",
                         *       "before": null,
                         *       "limit": 10
                         *     } */
                        metadata?: {
                            /** @description The cursor to the next page if it exists */
                            after: string | null;
                            /** @description The cursor to the previous page if it exists */
                            before: string | null;
                            /** @description The requested record limit */
                            limit: number;
                        };
                    } & components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    getTeam: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Team ID */
                team_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Team"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    getTeamCampaign: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Team Campaign ID */
                team_campaign_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TeamCampaign"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    getCampaignTargets: {
        parameters: {
            query?: {
                /** @description Returns records after the given cursor */
                after?: string;
                /** @description Returns records before the given cursor */
                before?: string;
                limit?: number;
            };
            header?: never;
            path: {
                /** @description Campaign ID or legacy ID */
                campaign_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Target"][];
                        /** @example {
                         *       "after": "bGlnaHQgwd==",
                         *       "before": null,
                         *       "limit": 10
                         *     } */
                        metadata?: {
                            /** @description The cursor to the next page if it exists */
                            after: string | null;
                            /** @description The cursor to the previous page if it exists */
                            before: string | null;
                            /** @description The requested record limit */
                            limit: number;
                        };
                    } & components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    getCauseFundraisingEvents: {
        parameters: {
            query?: {
                /** @description Returns records after the given cursor */
                after?: string;
                /** @description Returns records before the given cursor */
                before?: string;
                limit?: number;
            };
            header?: never;
            path: {
                /** @description Cause ID */
                cause_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["FundraisingEvent"][];
                        /** @example {
                         *       "after": "bGlnaHQgwd==",
                         *       "before": null,
                         *       "limit": 10
                         *     } */
                        metadata?: {
                            /** @description The cursor to the next page if it exists */
                            after: string | null;
                            /** @description The cursor to the previous page if it exists */
                            before: string | null;
                            /** @description The requested record limit */
                            limit: number;
                        };
                    } & components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    "V5ApiWeb.Public.CauseLeaderboardController.donor": {
        parameters: {
            query?: {
                /**
                 * @description The time range to use in leaderboard generation
                 * @example all
                 */
                time_type?: "daily" | "weekly" | "monthly" | "yearly" | "ytd" | "all";
                /** @description Returns records after the given cursor */
                after?: string;
                /** @description Returns records before the given cursor */
                before?: string;
                limit?: number;
            };
            header?: never;
            path: {
                /** @description Cause ID */
                cause_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["LeaderboardEntry"][];
                        /** @example {
                         *       "after": "bGlnaHQgwd==",
                         *       "before": null,
                         *       "limit": 10
                         *     } */
                        metadata?: {
                            /** @description The cursor to the next page if it exists */
                            after: string | null;
                            /** @description The cursor to the previous page if it exists */
                            before: string | null;
                            /** @description The requested record limit */
                            limit: number;
                        };
                    } & components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "appliction/json": components["schemas"]["Forbidden"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    getTeamCampaignMilestones: {
        parameters: {
            query?: {
                /**
                 * @description Returns disabled milestones. Defaults to false
                 * @example true
                 */
                include_disabled?: boolean;
                /**
                 * @description Returns only milestones that have been updated before the given moment in ISO8601 format
                 * @example 2021-11-02T14:24:55.811924Z
                 */
                created_before?: string;
                /**
                 * @description Returns only milestones that have been updated after the given moment in ISO8601 format
                 * @example 2021-11-02T14:24:55.811924Z
                 */
                created_after?: string;
                /**
                 * @description Returns only milestones that have been updated before the given moment in ISO8601 format
                 * @example 2021-11-02T14:24:55.811924Z
                 */
                updated_before?: string;
                /**
                 * @description Returns only milestones that have been updated after the given moment in ISO8601 format
                 * @example 2021-11-02T14:24:55.811924Z
                 */
                updated_after?: string;
                /** @description Returns records after the given cursor */
                after?: string;
                /** @description Returns records before the given cursor */
                before?: string;
                limit?: number;
            };
            header?: never;
            path: {
                /** @description Team Campaign ID or legacy ID */
                team_campaign_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Milestone"][];
                        /** @example {
                         *       "after": "bGlnaHQgwd==",
                         *       "before": null,
                         *       "limit": 10
                         *     } */
                        metadata?: {
                            /** @description The cursor to the next page if it exists */
                            after: string | null;
                            /** @description The cursor to the previous page if it exists */
                            before: string | null;
                            /** @description The requested record limit */
                            limit: number;
                        };
                    } & components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    getCampaignPollbyId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Poll ID */
                poll_id: string;
                /** @description Campaign ID */
                campaign_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Poll"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    getPersonalCampaign: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Personal Campaign ID */
                personal_campaign_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["PersonalCampaign"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    "V5ApiWeb.Public.UserController.show_slug": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User slug */
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["User"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    getFundraisingEvent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Fundraising Event ID */
                fundraising_event_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["FundraisingEvent"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    getTeamMembers: {
        parameters: {
            query?: {
                /** @description Returns records after the given cursor */
                after?: string;
                /** @description Returns records before the given cursor */
                before?: string;
                limit?: number;
            };
            header?: never;
            path: {
                /** @description Team ID */
                team_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TeamMember"][];
                        /** @example {
                         *       "after": "bGlnaHQgwd==",
                         *       "before": null,
                         *       "limit": 10
                         *     } */
                        metadata?: {
                            /** @description The cursor to the next page if it exists */
                            after: string | null;
                            /** @description The cursor to the previous page if it exists */
                            before: string | null;
                            /** @description The requested record limit */
                            limit: number;
                        };
                    } & components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    getUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User ID */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["User"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    getTeamCampaigns: {
        parameters: {
            query?: {
                /**
                 * @description Use this parameter to filter campaigns by the given status.
                 * @example published
                 */
                status?: "published" | "retired";
                /**
                 * @description Use this parameter to filter campaigns by the given supporting type.
                 * @example public
                 */
                supporting_type?: "invite_only" | "none" | "private" | "public";
                /**
                 * @description Returns only campaigns that have been updated after the given moment in ISO8601 format
                 * @example 2021-11-02T14:24:55.811924Z
                 */
                updated_after?: string;
                /**
                 * @description Returns only campaigns that have been updated before the given moment in ISO8601 format
                 * @example 2021-11-02T14:24:55.811924Z
                 */
                updated_before?: string;
                /** @description Returns records after the given cursor */
                after?: string;
                /** @description Returns records before the given cursor */
                before?: string;
                limit?: number;
            };
            header?: never;
            path: {
                /** @description Team ID */
                team_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TeamCampaign"][];
                        /** @example {
                         *       "after": "bGlnaHQgwd==",
                         *       "before": null,
                         *       "limit": 10
                         *     } */
                        metadata?: {
                            /** @description The cursor to the next page if it exists */
                            after: string | null;
                            /** @description The cursor to the previous page if it exists */
                            before: string | null;
                            /** @description The requested record limit */
                            limit: number;
                        };
                    } & components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    "V5ApiWeb.Public.TeamCampaignLeaderboardController.user": {
        parameters: {
            query?: {
                /**
                 * @description The time range to use in leaderboard generation
                 * @example all
                 */
                time_type?: "daily" | "weekly" | "monthly" | "yearly" | "ytd" | "all";
                /** @description Returns records after the given cursor */
                after?: string;
                /** @description Returns records before the given cursor */
                before?: string;
                limit?: number;
            };
            header?: never;
            path: {
                /** @description Team Event ID */
                team_campaign_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["LeaderboardEntry"][];
                        /** @example {
                         *       "after": "bGlnaHQgwd==",
                         *       "before": null,
                         *       "limit": 10
                         *     } */
                        metadata?: {
                            /** @description The cursor to the next page if it exists */
                            after: string | null;
                            /** @description The cursor to the previous page if it exists */
                            before: string | null;
                            /** @description The requested record limit */
                            limit: number;
                        };
                    } & components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "appliction/json": components["schemas"]["Forbidden"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    getCampaignDonations: {
        parameters: {
            query?: {
                /**
                 * @description Returns only donations that have been completed before the given moment in ISO8601 format
                 * @example 2021-11-02T14:24:55.811924Z
                 */
                completed_before?: string;
                /**
                 * @description Returns only donations that have been completed after the given moment in ISO8601 format
                 * @example 2021-11-02T14:24:55.811924Z
                 */
                completed_after?: string;
                /** @description Returns records after the given cursor */
                after?: string;
                /** @description Returns records before the given cursor */
                before?: string;
                limit?: number;
            };
            header?: never;
            path: {
                /** @description Campaign ID or legacy ID */
                campaign_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Donation"][];
                        /** @example {
                         *       "after": "bGlnaHQgwd==",
                         *       "before": null,
                         *       "limit": 10
                         *     } */
                        metadata?: {
                            /** @description The cursor to the next page if it exists */
                            after: string | null;
                            /** @description The cursor to the previous page if it exists */
                            before: string | null;
                            /** @description The requested record limit */
                            limit: number;
                        };
                    } & components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    getTeamCampaignFitnessGoals: {
        parameters: {
            query?: {
                /** @description Returns records after the given cursor */
                after?: string;
                /** @description Returns records before the given cursor */
                before?: string;
                limit?: number;
            };
            header?: never;
            path: {
                /** @description TeamCampaign ID or legacy ID */
                team_campaign_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["FitnessGoal"][];
                        /** @example {
                         *       "after": "bGlnaHQgwd==",
                         *       "before": null,
                         *       "limit": 10
                         *     } */
                        metadata?: {
                            /** @description The cursor to the next page if it exists */
                            after: string | null;
                            /** @description The cursor to the previous page if it exists */
                            before: string | null;
                            /** @description The requested record limit */
                            limit: number;
                        };
                    } & components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    getTeamBySlug: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Team slug */
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Team"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    getAuctionHouse: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Auction House ID */
                auction_house_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["AuctionHouse"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    getPersonalCampaignSupportingCampaigns: {
        parameters: {
            query?: {
                /**
                 * @description Use this parameter to filter campaigns by the given status.
                 * @example published
                 */
                status?: "published" | "retired";
                /**
                 * @description Returns only campaigns that have been updated after the given moment in ISO8601 format
                 * @example 2021-11-02T14:24:55.811924Z
                 */
                updated_after?: string;
                /**
                 * @description Returns only campaigns that have been updated before the given moment in ISO8601 format
                 * @example 2021-11-02T14:24:55.811924Z
                 */
                updated_before?: string;
                /** @description Returns records after the given cursor */
                after?: string;
                /** @description Returns records before the given cursor */
                before?: string;
                limit?: number;
            };
            header?: never;
            path: {
                /** @description Personal Campaign ID */
                personal_campaign_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["PersonalCampaign"][];
                        /** @example {
                         *       "after": "bGlnaHQgwd==",
                         *       "before": null,
                         *       "limit": 10
                         *     } */
                        metadata?: {
                            /** @description The cursor to the next page if it exists */
                            after: string | null;
                            /** @description The cursor to the previous page if it exists */
                            before: string | null;
                            /** @description The requested record limit */
                            limit: number;
                        };
                    } & components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    "V5ApiWeb.Oauth.Authorize": {
        parameters: {
            query: {
                /** @description Client Id */
                client_id: string;
                /** @description Redirect URI */
                redirect_uri: string;
                /** @description Response Type */
                response_type: "code";
                /** @description Scope */
                scope?: "public";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    "V5ApiWeb.Public.FundraisingEventLeaderboardController.team_fitness_distance": {
        parameters: {
            query?: {
                /**
                 * @description The time range to use in leaderboard generation
                 * @example all
                 */
                time_type?: "daily" | "weekly" | "monthly" | "yearly" | "ytd" | "all" | "custom";
                /** @description Returns records after the given cursor */
                after?: string;
                /** @description Returns records before the given cursor */
                before?: string;
                limit?: number;
            };
            header?: never;
            path: {
                /** @description Fundraising Event ID */
                fundraising_event_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["LeaderboardEntry"][];
                        /** @example {
                         *       "after": "bGlnaHQgwd==",
                         *       "before": null,
                         *       "limit": 10
                         *     } */
                        metadata?: {
                            /** @description The cursor to the next page if it exists */
                            after: string | null;
                            /** @description The cursor to the previous page if it exists */
                            before: string | null;
                            /** @description The requested record limit */
                            limit: number;
                        };
                    } & components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "appliction/json": components["schemas"]["Forbidden"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    getCampaignDonationMatches: {
        parameters: {
            query?: {
                /**
                 * @description Returns only donation matches that have been updated before the given moment in ISO8601 format
                 * @example 2021-11-02T14:24:55.811924Z
                 */
                created_before?: string;
                /**
                 * @description Returns only donation matches that have been updated after the given moment in ISO8601 format
                 * @example 2021-11-02T14:24:55.811924Z
                 */
                created_after?: string;
                /**
                 * @description Returns only donation matches that have been updated before the given moment in ISO8601 format
                 * @example 2021-11-02T14:24:55.811924Z
                 */
                updated_before?: string;
                /**
                 * @description Returns only donation matches that have been updated after the given moment in ISO8601 format
                 * @example 2021-11-02T14:24:55.811924Z
                 */
                updated_after?: string;
                /**
                 * @description Status of the donation match. One of: active, or completed
                 * @example completed
                 */
                status?: string;
                /** @description Returns records after the given cursor */
                after?: string;
                /** @description Returns records before the given cursor */
                before?: string;
                limit?: number;
            };
            header?: never;
            path: {
                /** @description Campaign ID or legacy ID */
                campaign_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["DonationMatch"][];
                        /** @example {
                         *       "after": "bGlnaHQgwd==",
                         *       "before": null,
                         *       "limit": 10
                         *     } */
                        metadata?: {
                            /** @description The cursor to the next page if it exists */
                            after: string | null;
                            /** @description The cursor to the previous page if it exists */
                            before: string | null;
                            /** @description The requested record limit */
                            limit: number;
                        };
                    } & components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    getTeamCampaignPollbyId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Poll ID */
                poll_id: string;
                /** @description Team Campaign ID or legacy ID */
                team_campaign_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Poll"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    getCampaign: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Campaign ID */
                campaign_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Campaign"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    getCampaignRewards: {
        parameters: {
            query?: {
                /** @description Returns records after the given cursor */
                after?: string;
                /** @description Returns records before the given cursor */
                before?: string;
                limit?: number;
            };
            header?: never;
            path: {
                /** @description Campaign ID or legacy ID */
                campaign_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Reward"][];
                        /** @example {
                         *       "after": "bGlnaHQgwd==",
                         *       "before": null,
                         *       "limit": 10
                         *     } */
                        metadata?: {
                            /** @description The cursor to the next page if it exists */
                            after: string | null;
                            /** @description The cursor to the previous page if it exists */
                            before: string | null;
                            /** @description The requested record limit */
                            limit: number;
                        };
                    } & components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    getFundraisingEventFitnessGoals: {
        parameters: {
            query?: {
                /** @description Returns records after the given cursor */
                after?: string;
                /** @description Returns records before the given cursor */
                before?: string;
                limit?: number;
            };
            header?: never;
            path: {
                /** @description FundraisingEvent ID or legacy ID */
                fundraising_event_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["FitnessGoal"][];
                        /** @example {
                         *       "after": "bGlnaHQgwd==",
                         *       "before": null,
                         *       "limit": 10
                         *     } */
                        metadata?: {
                            /** @description The cursor to the next page if it exists */
                            after: string | null;
                            /** @description The cursor to the previous page if it exists */
                            before: string | null;
                            /** @description The requested record limit */
                            limit: number;
                        };
                    } & components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    getAuctionHouseAuctionItems: {
        parameters: {
            query?: {
                /**
                 * @description Returns only auction items that have been updated before the given moment in ISO8601 format
                 * @example 2021-11-02T14:24:55.811924Z
                 */
                created_before?: string;
                /**
                 * @description Returns only auction items that have been updated after the given moment in ISO8601 format
                 * @example 2021-11-02T14:24:55.811924Z
                 */
                created_after?: string;
                /**
                 * @description Returns only auction items that have been updated before the given moment in ISO8601 format
                 * @example 2021-11-02T14:24:55.811924Z
                 */
                updated_before?: string;
                /**
                 * @description Returns only auction items that have been updated after the given moment in ISO8601 format
                 * @example 2021-11-02T14:24:55.811924Z
                 */
                updated_after?: string;
                /**
                 * @description Status of the auction item. One of: active, or completed
                 * @example completed
                 */
                status?: string;
                /** @description Returns records after the given cursor */
                after?: string;
                /** @description Returns records before the given cursor */
                before?: string;
                limit?: number;
            };
            header?: never;
            path: {
                /** @description Auction House ID */
                auction_house_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["AuctionItem"][];
                        /** @example {
                         *       "after": "bGlnaHQgwd==",
                         *       "before": null,
                         *       "limit": 10
                         *     } */
                        metadata?: {
                            /** @description The cursor to the next page if it exists */
                            after: string | null;
                            /** @description The cursor to the previous page if it exists */
                            before: string | null;
                            /** @description The requested record limit */
                            limit: number;
                        };
                    } & components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    getPersonalCampaignGifts: {
        parameters: {
            query?: {
                /**
                 * @description Returns only donations that have been completed before the given moment in ISO8601 format
                 * @example 2021-11-02T14:24:55.811924Z
                 */
                completed_before?: string;
                /**
                 * @description Returns only donations that have been completed after the given moment in ISO8601 format
                 * @example 2021-11-02T14:24:55.811924Z
                 */
                completed_after?: string;
                /** @description Returns records after the given cursor */
                after?: string;
                /** @description Returns records before the given cursor */
                before?: string;
                limit?: number;
            };
            header?: never;
            path: {
                /** @description Campaign ID */
                personal_campaign_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Contribution"][];
                        /** @example {
                         *       "after": "bGlnaHQgwd==",
                         *       "before": null,
                         *       "limit": 10
                         *     } */
                        metadata?: {
                            /** @description The cursor to the next page if it exists */
                            after: string | null;
                            /** @description The cursor to the previous page if it exists */
                            before: string | null;
                            /** @description The requested record limit */
                            limit: number;
                        };
                    } & components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    getAuctionHouseAuctionItemById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Auction House ID */
                auction_house_id: string;
                /** @description Auction Item ID */
                auction_item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["AuctionItem"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    getCampaignMilestones: {
        parameters: {
            query?: {
                /**
                 * @description Returns disabled milestones. Defaults to false
                 * @example true
                 */
                include_disabled?: boolean;
                /**
                 * @description Returns only milestones that have been updated before the given moment in ISO8601 format
                 * @example 2021-11-02T14:24:55.811924Z
                 */
                created_before?: string;
                /**
                 * @description Returns only milestones that have been updated after the given moment in ISO8601 format
                 * @example 2021-11-02T14:24:55.811924Z
                 */
                created_after?: string;
                /**
                 * @description Returns only milestones that have been updated before the given moment in ISO8601 format
                 * @example 2021-11-02T14:24:55.811924Z
                 */
                updated_before?: string;
                /**
                 * @description Returns only milestones that have been updated after the given moment in ISO8601 format
                 * @example 2021-11-02T14:24:55.811924Z
                 */
                updated_after?: string;
                /** @description Returns records after the given cursor */
                after?: string;
                /** @description Returns records before the given cursor */
                before?: string;
                limit?: number;
            };
            header?: never;
            path: {
                /** @description Campaign ID or legacy ID */
                campaign_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Milestone"][];
                        /** @example {
                         *       "after": "bGlnaHQgwd==",
                         *       "before": null,
                         *       "limit": 10
                         *     } */
                        metadata?: {
                            /** @description The cursor to the next page if it exists */
                            after: string | null;
                            /** @description The cursor to the previous page if it exists */
                            before: string | null;
                            /** @description The requested record limit */
                            limit: number;
                        };
                    } & components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    getFundraisingEventDonations: {
        parameters: {
            query?: {
                /**
                 * @description Returns only donations that have been completed before the given moment in ISO8601 format
                 * @example 2021-11-02T14:24:55.811924Z
                 */
                completed_before?: string;
                /**
                 * @description Returns only donations that have been completed after the given moment in ISO8601 format
                 * @example 2021-11-02T14:24:55.811924Z
                 */
                completed_after?: string;
                /** @description Returns records after the given cursor */
                after?: string;
                /** @description Returns records before the given cursor */
                before?: string;
                limit?: number;
            };
            header?: never;
            path: {
                /** @description FundraisingEvent ID or legacy ID */
                fundraising_event_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Donation"][];
                        /** @example {
                         *       "after": "bGlnaHQgwd==",
                         *       "before": null,
                         *       "limit": 10
                         *     } */
                        metadata?: {
                            /** @description The cursor to the next page if it exists */
                            after: string | null;
                            /** @description The cursor to the previous page if it exists */
                            before: string | null;
                            /** @description The requested record limit */
                            limit: number;
                        };
                    } & components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    getLegacyRelay: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The provider ID */
                provider: string;
                /** @description The providers UUID */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["LegacyRelay"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    getTeamCampaignRewards: {
        parameters: {
            query?: {
                /** @description Returns records after the given cursor */
                after?: string;
                /** @description Returns records before the given cursor */
                before?: string;
                limit?: number;
            };
            header?: never;
            path: {
                /** @description Team Campaign ID or legacy ID */
                team_campaign_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Reward"][];
                        /** @example {
                         *       "after": "bGlnaHQgwd==",
                         *       "before": null,
                         *       "limit": 10
                         *     } */
                        metadata?: {
                            /** @description The cursor to the next page if it exists */
                            after: string | null;
                            /** @description The cursor to the previous page if it exists */
                            before: string | null;
                            /** @description The requested record limit */
                            limit: number;
                        };
                    } & components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    getCauseConfiguredLeaderboards: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description cause id */
                cause_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["ConfiguredLeaderboard"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "appliction/json": components["schemas"]["Forbidden"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    getUserCampaigns: {
        parameters: {
            query?: {
                /**
                 * @description Use this parameter to filter campaigns by the given status.
                 * @example published
                 */
                status?: "published" | "retired";
                /**
                 * @description Use this parameter to filter campaigns by the given supporting type.
                 * @example public
                 */
                supporting_type?: "invite_only" | "none" | "private" | "public";
                /**
                 * @description Returns only campaigns that have been updated after the given moment in ISO8601 format
                 * @example 2021-11-02T14:24:55.811924Z
                 */
                updated_after?: string;
                /**
                 * @description Returns only campaigns that have been updated before the given moment in ISO8601 format
                 * @example 2021-11-02T14:24:55.811924Z
                 */
                updated_before?: string;
                /** @description Returns records after the given cursor */
                after?: string;
                /** @description Returns records before the given cursor */
                before?: string;
                limit?: number;
            };
            header?: never;
            path: {
                /** @description User ID */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Team"][];
                        /** @example {
                         *       "after": "bGlnaHQgwd==",
                         *       "before": null,
                         *       "limit": 10
                         *     } */
                        metadata?: {
                            /** @description The cursor to the next page if it exists */
                            after: string | null;
                            /** @description The cursor to the previous page if it exists */
                            before: string | null;
                            /** @description The requested record limit */
                            limit: number;
                        };
                    } & components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    getPersonalCampaignSchedules: {
        parameters: {
            query?: {
                /** @description Returns records after the given cursor */
                after?: string;
                /** @description Returns records before the given cursor */
                before?: string;
                limit?: number;
            };
            header?: never;
            path: {
                /** @description Campaign ID */
                personal_campaign_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Schedule"][];
                        /** @example {
                         *       "after": "bGlnaHQgwd==",
                         *       "before": null,
                         *       "limit": 10
                         *     } */
                        metadata?: {
                            /** @description The cursor to the next page if it exists */
                            after: string | null;
                            /** @description The cursor to the previous page if it exists */
                            before: string | null;
                            /** @description The requested record limit */
                            limit: number;
                        };
                    } & components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    "V5ApiWeb.Public.CauseLeaderboardController.user": {
        parameters: {
            query?: {
                /**
                 * @description The time range to use in leaderboard generation
                 * @example all
                 */
                time_type?: "daily" | "weekly" | "monthly" | "yearly" | "ytd" | "all";
                /** @description Returns records after the given cursor */
                after?: string;
                /** @description Returns records before the given cursor */
                before?: string;
                limit?: number;
            };
            header?: never;
            path: {
                /** @description Cause ID */
                cause_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["LeaderboardEntry"][];
                        /** @example {
                         *       "after": "bGlnaHQgwd==",
                         *       "before": null,
                         *       "limit": 10
                         *     } */
                        metadata?: {
                            /** @description The cursor to the next page if it exists */
                            after: string | null;
                            /** @description The cursor to the previous page if it exists */
                            before: string | null;
                            /** @description The requested record limit */
                            limit: number;
                        };
                    } & components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "appliction/json": components["schemas"]["Forbidden"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    getAuctionHouseAuctionItemAuctionBids: {
        parameters: {
            query?: {
                /** @description Returns records after the given cursor */
                after?: string;
                /** @description Returns records before the given cursor */
                before?: string;
                limit?: number;
            };
            header?: never;
            path: {
                /** @description Auction House ID */
                auction_house_id: string;
                /** @description Auction Item ID */
                auction_item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["AuctionBid"][];
                        /** @example {
                         *       "after": "bGlnaHQgwd==",
                         *       "before": null,
                         *       "limit": 10
                         *     } */
                        metadata?: {
                            /** @description The cursor to the next page if it exists */
                            after: string | null;
                            /** @description The cursor to the previous page if it exists */
                            before: string | null;
                            /** @description The requested record limit */
                            limit: number;
                        };
                    } & components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    getTeamCampaignTopDonors: {
        parameters: {
            query?: {
                /**
                 * @description The time range to use in leaderboard generation
                 * @example all
                 */
                time_type?: "daily" | "weekly" | "monthly" | "yearly" | "ytd" | "all";
                /** @description Returns records after the given cursor */
                after?: string;
                /** @description Returns records before the given cursor */
                before?: string;
                limit?: number;
            };
            header?: never;
            path: {
                /** @description Team Event ID */
                team_campaign_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["LeaderboardEntry"][];
                        /** @example {
                         *       "after": "bGlnaHQgwd==",
                         *       "before": null,
                         *       "limit": 10
                         *     } */
                        metadata?: {
                            /** @description The cursor to the next page if it exists */
                            after: string | null;
                            /** @description The cursor to the previous page if it exists */
                            before: string | null;
                            /** @description The requested record limit */
                            limit: number;
                        };
                    } & components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "appliction/json": components["schemas"]["Forbidden"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    getTeamCampaignSupportingCampaigns: {
        parameters: {
            query?: {
                /**
                 * @description Use this parameter to filter campaigns by the given status.
                 * @example published
                 */
                status?: "published" | "retired";
                /**
                 * @description Returns only campaigns that have been updated after the given moment in ISO8601 format
                 * @example 2021-11-02T14:24:55.811924Z
                 */
                updated_after?: string;
                /**
                 * @description Returns only campaigns that have been updated before the given moment in ISO8601 format
                 * @example 2021-11-02T14:24:55.811924Z
                 */
                updated_before?: string;
                /** @description Returns records after the given cursor */
                after?: string;
                /** @description Returns records before the given cursor */
                before?: string;
                limit?: number;
            };
            header?: never;
            path: {
                /** @description Team Campaign ID */
                team_campaign_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Campaign"][];
                        /** @example {
                         *       "after": "bGlnaHQgwd==",
                         *       "before": null,
                         *       "limit": 10
                         *     } */
                        metadata?: {
                            /** @description The cursor to the next page if it exists */
                            after: string | null;
                            /** @description The cursor to the previous page if it exists */
                            before: string | null;
                            /** @description The requested record limit */
                            limit: number;
                        };
                    } & components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    getPersonalCampaignPolls: {
        parameters: {
            query?: {
                /** @description Returns records after the given cursor */
                after?: string;
                /** @description Returns records before the given cursor */
                before?: string;
                limit?: number;
            };
            header?: never;
            path: {
                /** @description Campaign ID */
                personal_campaign_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Poll"][];
                        /** @example {
                         *       "after": "bGlnaHQgwd==",
                         *       "before": null,
                         *       "limit": 10
                         *     } */
                        metadata?: {
                            /** @description The cursor to the next page if it exists */
                            after: string | null;
                            /** @description The cursor to the previous page if it exists */
                            before: string | null;
                            /** @description The requested record limit */
                            limit: number;
                        };
                    } & components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    getCampaignTopDonors: {
        parameters: {
            query?: {
                /**
                 * @description The time range to use in leaderboard generation
                 * @example all
                 */
                time_type?: "daily" | "weekly" | "monthly" | "yearly" | "ytd" | "all";
                /** @description Returns records after the given cursor */
                after?: string;
                /** @description Returns records before the given cursor */
                before?: string;
                limit?: number;
            };
            header?: never;
            path: {
                /** @description Campaign ID */
                campaign_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["LeaderboardEntry"][];
                        /** @example {
                         *       "after": "bGlnaHQgwd==",
                         *       "before": null,
                         *       "limit": 10
                         *     } */
                        metadata?: {
                            /** @description The cursor to the next page if it exists */
                            after: string | null;
                            /** @description The cursor to the previous page if it exists */
                            before: string | null;
                            /** @description The requested record limit */
                            limit: number;
                        };
                    } & components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "appliction/json": components["schemas"]["Forbidden"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    "V5ApiWeb.Public.TeamCampaignController.show_slug": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Team Slug */
                team_slug: string;
                /** @description Campaign Slug */
                team_campaign_slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TeamCampaign"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    getCause: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Cause ID */
                cause_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Cause"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    getPersonalCampaignTargets: {
        parameters: {
            query?: {
                /** @description Returns records after the given cursor */
                after?: string;
                /** @description Returns records before the given cursor */
                before?: string;
                limit?: number;
            };
            header?: never;
            path: {
                /** @description Campaign ID */
                personal_campaign_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Target"][];
                        /** @example {
                         *       "after": "bGlnaHQgwd==",
                         *       "before": null,
                         *       "limit": 10
                         *     } */
                        metadata?: {
                            /** @description The cursor to the next page if it exists */
                            after: string | null;
                            /** @description The cursor to the previous page if it exists */
                            before: string | null;
                            /** @description The requested record limit */
                            limit: number;
                        };
                    } & components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
    "V5ApiWeb.Public.AuctionHouseController.show_cause_slug": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Caus slug */
                cause_slug: string;
                /** @description Auction house slug */
                auction_house_slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["AuctionHouse"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnprocessableEntity"];
                };
            };
        };
    };
}
